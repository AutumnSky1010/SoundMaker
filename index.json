{
  "HowToUseDocFX.html": {
    "href": "HowToUseDocFX.html",
    "title": "ローカル環境でドキュメントをプレビューする方法 | SoundMaker Documentation",
    "keywords": "ローカル環境でドキュメントをプレビューする方法 リポジトリルートで、 docfx docs\\docfx.json --serve を実行する。"
  },
  "api/SoundMaker.FormatBuilder.BitDepthBuilder.html": {
    "href": "api/SoundMaker.FormatBuilder.BitDepthBuilder.html",
    "title": "Class FormatBuilder.BitDepthBuilder | SoundMaker Documentation",
    "keywords": "Class FormatBuilder.BitDepthBuilder Namespace SoundMaker Assembly SoundMaker.dll public class FormatBuilder.BitDepthBuilder Inheritance object FormatBuilder.BitDepthBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithBitDepth(int) Sets a bit depth(BitRateType) to format. 量子化ビット数を指定する。 public FormatBuilder.ChannelTypeBuilder WithBitDepth(int bitDepth) Parameters bitDepth int value Returns FormatBuilder.ChannelTypeBuilder builder Exceptions ArgumentException The bitDepth value must be either 8 or 16."
  },
  "api/SoundMaker.FormatBuilder.ChannelTypeBuilder.html": {
    "href": "api/SoundMaker.FormatBuilder.ChannelTypeBuilder.html",
    "title": "Class FormatBuilder.ChannelTypeBuilder | SoundMaker Documentation",
    "keywords": "Class FormatBuilder.ChannelTypeBuilder Namespace SoundMaker Assembly SoundMaker.dll public class FormatBuilder.ChannelTypeBuilder Inheritance object FormatBuilder.ChannelTypeBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithChannelCount(int) Sets a count fo channels to format. チャンネル数を設定する(1: モノラル、2: ステレオ) public FormatBuilder WithChannelCount(int count) Parameters count int count of channels チャンネル数 Returns FormatBuilder Exceptions ArgumentException The count value must be either 1 or 2."
  },
  "api/SoundMaker.FormatBuilder.SamplingFrequencyBuilder.html": {
    "href": "api/SoundMaker.FormatBuilder.SamplingFrequencyBuilder.html",
    "title": "Class FormatBuilder.SamplingFrequencyBuilder | SoundMaker Documentation",
    "keywords": "Class FormatBuilder.SamplingFrequencyBuilder Namespace SoundMaker Assembly SoundMaker.dll public class FormatBuilder.SamplingFrequencyBuilder Inheritance object FormatBuilder.SamplingFrequencyBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithFrequency(int) Sets a sampling frequency to format. サンプリング周波数を指定する。 public FormatBuilder.BitDepthBuilder WithFrequency(int frequency) Parameters frequency int sampling frequency Returns FormatBuilder.BitDepthBuilder builder Exceptions ArgumentException The frequency value must be either 48000 or 44100."
  },
  "api/SoundMaker.FormatBuilder.html": {
    "href": "api/SoundMaker.FormatBuilder.html",
    "title": "Class FormatBuilder | SoundMaker Documentation",
    "keywords": "Class FormatBuilder Namespace SoundMaker Assembly SoundMaker.dll Represents a class used to build SoundFormat and FormatChunk. public class FormatBuilder Inheritance object FormatBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create() Create an instance of builder. ビルダのインスタンスを作成する。 public static FormatBuilder.SamplingFrequencyBuilder Create() Returns FormatBuilder.SamplingFrequencyBuilder builder ToFormatChunk() Build to FormatChunk. FormatChunkにビルドする。 public FormatChunk ToFormatChunk() Returns FormatChunk FormatChunk ToSoundFormat() Build to SoundFormat. SoundFormatにビルドする。 public SoundFormat ToSoundFormat() Returns SoundFormat SoundFormat"
  },
  "api/SoundMaker.ScoreData.SMSC.Error.html": {
    "href": "api/SoundMaker.ScoreData.SMSC.Error.html",
    "title": "Class Error | SoundMaker Documentation",
    "keywords": "Class Error Namespace SoundMaker.ScoreData.SMSC Assembly SoundMaker.dll Error of reading SMSC data SMSCデータの読み取り結果 public record Error : IEquatable<Error> Inheritance object Error Implements IEquatable<Error> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LineNumber Line number of error. エラー箇所の行番号 public int LineNumber { get; } Property Value int Literal String of error location エラー箇所の文字列 public string Literal { get; } Property Value string Type Type of errors エラーの種類 public SMSCReadErrorType Type { get; } Property Value SMSCReadErrorType"
  },
  "api/SoundMaker.ScoreData.SMSC.SMSCFormat.html": {
    "href": "api/SoundMaker.ScoreData.SMSC.SMSCFormat.html",
    "title": "Class SMSCFormat | SoundMaker Documentation",
    "keywords": "Class SMSCFormat Namespace SoundMaker.ScoreData.SMSC Assembly SoundMaker.dll The SMSC (SoundMaker SCore) Format public static class SMSCFormat Inheritance object SMSCFormat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Read(string) Reads SMSC data. SMSCデータを読み込む。 public static SMSCReadResult Read(string data) Parameters data string SMSC data. SMSCデータ Returns SMSCReadResult The read results. 読み取り結果 Serialize(IEnumerable<ISoundComponent>) Outputs SMSC data. SMSCデータを出力する。 public static string Serialize(IEnumerable<ISoundComponent> components) Parameters components IEnumerable<ISoundComponent> Sound components to write. 書き込むサウンドコンポーネント Returns string SMSC data. SMSCデータ"
  },
  "api/SoundMaker.ScoreData.SMSC.SMSCReadErrorType.html": {
    "href": "api/SoundMaker.ScoreData.SMSC.SMSCReadErrorType.html",
    "title": "Enum SMSCReadErrorType | SoundMaker Documentation",
    "keywords": "Enum SMSCReadErrorType Namespace SoundMaker.ScoreData.SMSC Assembly SoundMaker.dll Errors of reading SMSC data SMSCデータ読み込み時のエラー public enum SMSCReadErrorType Fields InvalidLength = 3 InvalidScale = 4 NotFoundComma = 0 NotFoundLeftParentheses = 1 NotFoundRightParentheses = 2 UndefinedStatement = 5"
  },
  "api/SoundMaker.ScoreData.SMSC.SMSCReadResult.html": {
    "href": "api/SoundMaker.ScoreData.SMSC.SMSCReadResult.html",
    "title": "Class SMSCReadResult | SoundMaker Documentation",
    "keywords": "Class SMSCReadResult Namespace SoundMaker.ScoreData.SMSC Assembly SoundMaker.dll Result of reading SMSC data SMSCデータの読み取り結果 public class SMSCReadResult Inheritance object SMSCReadResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Errors Errors when reading SMSC. SMSCを読み込んだ際のエラー public IReadOnlyList<Error> Errors { get; } Property Value IReadOnlyList<Error> IsSuccess Whether the reading was successful. 読み込みに成功したか public bool IsSuccess { get; } Property Value bool Methods TryGetValue(out IReadOnlyList<ISoundComponent>) Returns whether the reading was successful and, if successful, returns the result. If it fails, an empty array will be in value. 読み込みに成功したかを返し、成功した場合は結果を返す。失敗時は空の配列がvalueに入る。 public bool TryGetValue(out IReadOnlyList<ISoundComponent> value) Parameters value IReadOnlyList<ISoundComponent> On success: result, On failure: empty array Returns bool On success: true, On failure: false Unwrap() Returns the result assuming the reading was successful. If it fails or empty, an empty array is returned. 読み込みに成功した前提で結果を返す。失敗時は空の配列が戻る。 public IReadOnlyList<ISoundComponent> Unwrap() Returns IReadOnlyList<ISoundComponent> On success: result, On failure: empty array"
  },
  "api/SoundMaker.ScoreData.SMSC.html": {
    "href": "api/SoundMaker.ScoreData.SMSC.html",
    "title": "Namespace SoundMaker.ScoreData.SMSC | SoundMaker Documentation",
    "keywords": "Namespace SoundMaker.ScoreData.SMSC Classes Error Error of reading SMSC data SMSCデータの読み取り結果 SMSCFormat The SMSC (SoundMaker SCore) Format SMSCReadResult Result of reading SMSC data SMSCデータの読み取り結果 Enums SMSCReadErrorType Errors of reading SMSC data SMSCデータ読み込み時のエラー"
  },
  "api/SoundMaker.Sounds.BitRateType.html": {
    "href": "api/SoundMaker.Sounds.BitRateType.html",
    "title": "Enum BitRateType | SoundMaker Documentation",
    "keywords": "Enum BitRateType Namespace SoundMaker.Sounds Assembly SoundMaker.dll the type which is expressed quantization bit rate of the sound. 量子化ビット数の種類を表す列挙型 public enum BitRateType Fields EightBit = 8 8bit SixteenBit = 16 16bit"
  },
  "api/SoundMaker.Sounds.ChannelType.html": {
    "href": "api/SoundMaker.Sounds.ChannelType.html",
    "title": "Enum ChannelType | SoundMaker Documentation",
    "keywords": "Enum ChannelType Namespace SoundMaker.Sounds Assembly SoundMaker.dll the type which is expressed channels count of the sound. チャンネル数を表す列挙型 public enum ChannelType Fields Monaural = 0 monaural(1ch) モノラル1ch Stereo = 1 stereo(2ch) ステレオ2ch"
  },
  "api/SoundMaker.Sounds.IWave.html": {
    "href": "api/SoundMaker.Sounds.IWave.html",
    "title": "Interface IWave | SoundMaker Documentation",
    "keywords": "Interface IWave Namespace SoundMaker.Sounds Assembly SoundMaker.dll Interface for wave. 波を表すインターフェイス public interface IWave Methods GetBytes(BitRateType) Get the array of bytes of wave data. 波形データのバイト列を取得するメソッド。 byte[] GetBytes(BitRateType bitRate) Parameters bitRate BitRateType Quantization bit rate. 量子化ビット数 Returns byte[] Array of bytes of wave data. 波形データのバイト列 : byte[] GetLengthOfBytes(BitRateType) Get the length of bytes of wave data. 波形データのバイト列の長さを取得するメソッド。 int GetLengthOfBytes(BitRateType bitRate) Parameters bitRate BitRateType Quantization bit rate. 量子化ビット数 Returns int Length of bytes of wave data."
  },
  "api/SoundMaker.Sounds.MixerBase.html": {
    "href": "api/SoundMaker.Sounds.MixerBase.html",
    "title": "Class MixerBase | SoundMaker Documentation",
    "keywords": "Class MixerBase Namespace SoundMaker.Sounds Assembly SoundMaker.dll Provides a base class for a mixer to inherit from. ミキサーの抽象基底クラス public abstract class MixerBase Inheritance object MixerBase Derived MonauralMixer StereoMixer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MixerBase(IReadOnlyList<ISoundChannel>) Provides a base class for a mixer to inherit from. ミキサーの抽象基底クラス protected MixerBase(IReadOnlyList<ISoundChannel> channels) Parameters channels IReadOnlyList<ISoundChannel> List of sound channels (read-only). 音声チャンネルのリスト(読み取り専用) Properties Channels List of channels. チャンネルのリスト protected IReadOnlyList<ISoundChannel> Channels { get; } Property Value IReadOnlyList<ISoundChannel> Format Sound format. 音のフォーマット protected SoundFormat Format { get; } Property Value SoundFormat Methods GetMaxWaveLength() Method to return the length of the longest array in each channel's waveform data. 各チャンネルの波形データで一番長い配列の長さを返すメソッド。 protected int GetMaxWaveLength() Returns int Length of the longest array. 最長の配列の長さ : int"
  },
  "api/SoundMaker.Sounds.MonauralMixer.html": {
    "href": "api/SoundMaker.Sounds.MonauralMixer.html",
    "title": "Class MonauralMixer | SoundMaker Documentation",
    "keywords": "Class MonauralMixer Namespace SoundMaker.Sounds Assembly SoundMaker.dll Mix waves to monaural wave. モノラル音声をミックスするクラス。 public class MonauralMixer : MixerBase Inheritance object MixerBase MonauralMixer Inherited Members MixerBase.Channels MixerBase.Format MixerBase.GetMaxWaveLength() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MonauralMixer(IReadOnlyList<ISoundChannel>) Mix waves to monaural wave. モノラル音声をミックスするクラス。 public MonauralMixer(IReadOnlyList<ISoundChannel> channels) Parameters channels IReadOnlyList<ISoundChannel> Channels. チャンネルのリスト(読み取り専用) Methods Mix() Mix. ミックスする。 public MonauralWave Mix() Returns MonauralWave The mixed wave of monaural. モノラルの波形データ : MonauralWave"
  },
  "api/SoundMaker.Sounds.MonauralWave.html": {
    "href": "api/SoundMaker.Sounds.MonauralWave.html",
    "title": "Class MonauralWave | SoundMaker Documentation",
    "keywords": "Class MonauralWave Namespace SoundMaker.Sounds Assembly SoundMaker.dll Monaural wave. モノラル波形データを表すクラス。 public class MonauralWave : IWave Inheritance object MonauralWave Implements IWave Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MonauralWave(IReadOnlyCollection<short>) Constructor. コンストラクタ public MonauralWave(IReadOnlyCollection<short> wave) Parameters wave IReadOnlyCollection<short> The collection of wave data. 波形データを表す配列 Properties Volume public int Volume { get; } Property Value int Methods Append(MonauralWave) Append different MonauralWave. 別の波形データを末尾に繋げるメソッド。 public void Append(MonauralWave wave) Parameters wave MonauralWave Monaural wave. モノラルの波形データ ChangeVolume(int) Change volume. 音量を変更するメソッド public void ChangeVolume(int volume) Parameters volume int Volume (0 ~ 100). 音量(0 ~ 100) GetBytes(BitRateType) Get the array of bytes of wave data. 波形データのバイト列を取得するメソッド。 public byte[] GetBytes(BitRateType bitRate) Parameters bitRate BitRateType Quantization bit rate. 量子化ビット数 Returns byte[] Array of bytes of wave data. 波形データのバイト列 : byte[] GetLengthOfBytes(BitRateType) Get the length of bytes of wave data. 波形データのバイト列の長さを取得するメソッド。 public int GetLengthOfBytes(BitRateType bitRate) Parameters bitRate BitRateType Quantization bit rate. 量子化ビット数 Returns int Length of bytes of wave data. GetWave() Get the wave. 音の波形データを取得するメソッド。 public short[] GetWave() Returns short[] The wave. 波形データ : short[]"
  },
  "api/SoundMaker.Sounds.SamplingFrequencyType.html": {
    "href": "api/SoundMaker.Sounds.SamplingFrequencyType.html",
    "title": "Enum SamplingFrequencyType | SoundMaker Documentation",
    "keywords": "Enum SamplingFrequencyType Namespace SoundMaker.Sounds Assembly SoundMaker.dll The type which is expressed sampling frequency of the sound. サンプリング周波数の種類を表す列挙型 public enum SamplingFrequencyType Fields FourtyEightKHz = 48000 48000Hz FourtyFourKHz = 44100 44100Hz"
  },
  "api/SoundMaker.Sounds.Score.BasicSoundComponentBase.html": {
    "href": "api/SoundMaker.Sounds.Score.BasicSoundComponentBase.html",
    "title": "Class BasicSoundComponentBase | SoundMaker Documentation",
    "keywords": "Class BasicSoundComponentBase Namespace SoundMaker.Sounds.Score Assembly SoundMaker.dll Provides a base class for a basic sound component to inherit from. 音符・休符など音の基本部品を表す抽象基底クラス public abstract class BasicSoundComponentBase : ISoundComponent Inheritance object BasicSoundComponentBase Implements ISoundComponent Derived Note Rest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BasicSoundComponentBase(LengthType, bool) Constructor. コンストラクタ public BasicSoundComponentBase(LengthType length, bool isDotted) Parameters length LengthType Length (ex. \"quarter\" note). 長さ（音楽的な、「四分」音符、「全」休符のような長さを表す。） isDotted bool Is note/rest dotted. 付点かを表す論理型 Properties IsDotted Note/rest is dotted. 付点かを表す論理型 public bool IsDotted { get; } Property Value bool Length Length (ex. \"quarter\" note). 長さ（音楽的な、「四分」音符、「全」休符のような長さを表す。） public LengthType Length { get; } Property Value LengthType Methods Clone() Creates a clone of the sound component. サウンドコンポーネントのクローンを作成するメソッド。 public abstract ISoundComponent Clone() Returns ISoundComponent A new instance of the sound component with the same properties. 同じプロパティを持つサウンドコンポーネントの新しいインスタンス GenerateWave(SoundFormat, int, WaveTypeBase) Generate the wave of wave type. 波形の種類に基づいて波形データの配列を生成するメソッド。 public abstract short[] GenerateWave(SoundFormat format, int tempo, WaveTypeBase waveType) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 waveType WaveTypeBase Type of wave. 波形の種類 Returns short[] Data of wave. 波形データ : short[] Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. GenerateWave(SoundFormat, int, int, WaveTypeBase) Generate the wave of wave type. 波形の種類に基づいて波形データの配列を生成するメソッド。 public abstract short[] GenerateWave(SoundFormat format, int tempo, int length, WaveTypeBase waveType) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 length int Length of the array. 配列の長さ waveType WaveTypeBase Type of wave. 波形の種類 Returns short[] Data of wave. 波形データ : short[] Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. ArgumentOutOfRangeException Length must be non-negative. GetWaveArrayLength(SoundFormat, int) Return length of the sound array. 音の配列の長さを取得するメソッド。 public int GetWaveArrayLength(SoundFormat format, int tempo) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 Returns int Length of array. 配列の長さ : int Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0."
  },
  "api/SoundMaker.Sounds.Score.ISoundComponent.html": {
    "href": "api/SoundMaker.Sounds.Score.ISoundComponent.html",
    "title": "Interface ISoundComponent | SoundMaker Documentation",
    "keywords": "Interface ISoundComponent Namespace SoundMaker.Sounds.Score Assembly SoundMaker.dll Interface for sound components. 音の部品を表すインターフェイス public interface ISoundComponent Methods Clone() Creates a clone of the sound component. サウンドコンポーネントのクローンを作成するメソッド。 ISoundComponent Clone() Returns ISoundComponent A new instance of the sound component with the same properties. 同じプロパティを持つサウンドコンポーネントの新しいインスタンス GenerateWave(SoundFormat, int, WaveTypeBase) Generate the wave of wave type. 波形の種類に基づいて波形データの配列を生成するメソッド。 short[] GenerateWave(SoundFormat format, int tempo, WaveTypeBase waveType) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 waveType WaveTypeBase Type of wave. 波形の種類 Returns short[] Data of wave. 波形データ : short[] Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. GenerateWave(SoundFormat, int, int, WaveTypeBase) Generate the wave of wave type. 波形の種類に基づいて波形データの配列を生成するメソッド。 short[] GenerateWave(SoundFormat format, int tempo, int length, WaveTypeBase waveType) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 length int Length of the array. 配列の長さ waveType WaveTypeBase Type of wave. 波形の種類 Returns short[] Data of wave. 波形データ : short[] Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. ArgumentOutOfRangeException Length must be non-negative. GetWaveArrayLength(SoundFormat, int) Return length of the sound array. 音の配列の長さを取得するメソッド。 int GetWaveArrayLength(SoundFormat format, int tempo) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 Returns int Length of array. 配列の長さ : int Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0."
  },
  "api/SoundMaker.Sounds.Score.LengthType.html": {
    "href": "api/SoundMaker.Sounds.Score.LengthType.html",
    "title": "Enum LengthType | SoundMaker Documentation",
    "keywords": "Enum LengthType Namespace SoundMaker.Sounds.Score Assembly SoundMaker.dll Type of length. (ex. \"quarter\" note). 長さのタイプを列挙（音楽的な、「四分」音符、「全」休符のような長さを表す。） public enum LengthType Fields Eighth = 8 8th. 八分音符・休符 Half = 2 Half. 二分音符・休符 Quarter = 4 Quarter. 四分音符・休符 Sixteenth = 16 16th. 十六分音符・休符 SixtyFourth = 64 64th. 六十四分音符・休符 ThirtySecond = 32 32nd. 三十二分音符・休符 Whole = 1 Whole. 全音符・休符"
  },
  "api/SoundMaker.Sounds.Score.Note.html": {
    "href": "api/SoundMaker.Sounds.Score.Note.html",
    "title": "Class Note | SoundMaker Documentation",
    "keywords": "Class Note Namespace SoundMaker.Sounds.Score Assembly SoundMaker.dll The note. 音符を表すクラス public class Note : BasicSoundComponentBase, ISoundComponent Inheritance object BasicSoundComponentBase Note Implements ISoundComponent Inherited Members BasicSoundComponentBase.Length BasicSoundComponentBase.IsDotted BasicSoundComponentBase.GetWaveArrayLength(SoundFormat, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Note(LengthType, bool) Easiness constructor (use case: construct Tie). Scale is \"A4\". 簡易コンストラクタ(使用場面: タイの初期化)。音の高さは\"A4\" public Note(LengthType length, bool isDotted = false) Parameters length LengthType Length (ex. \"quarter\" note). 長さ（音楽的な、「四分」音符、「全」休符のような長さを表す。） isDotted bool Is note/rest dotted. 付点かを表す論理型 Note(Scale, int, LengthType, bool) Constructor. コンストラクタ public Note(Scale scale, int scaleNumber, LengthType length, bool isDotted = false) Parameters scale Scale Scale of the note. 音の高さ scaleNumber int Sound height number. (C\"4\" is middle C.) 音の高さの番号（Cの「4」が真ん中のド） length LengthType Length (ex. \"quarter\" note). 長さ（音楽的な、「四分」音符、「全」休符のような長さを表す。） isDotted bool Is note/rest dotted. 付点かを表す論理型 Exceptions ArgumentException Scale and scale number must be only the range of sound that the piano can produce. Properties Hertz Hertz of the sound. 音の周波数 public double Hertz { get; } Property Value double Scale Scale of the note. 音の高さ public Scale Scale { get; } Property Value Scale ScaleNumber Sound height number. (C\"4\" is middle C.) 音の高さの番号（Cの「4」が真ん中のド） public int ScaleNumber { get; } Property Value int Volume Volume of the sound. (0 ~ 100) 音の大きさ(0 ~ 100の間) public int Volume { get; set; } Property Value int Methods Clone() Creates a clone of the sound component. サウンドコンポーネントのクローンを作成するメソッド。 public override Note Clone() Returns Note A new instance of the sound component with the same properties. 同じプロパティを持つサウンドコンポーネントの新しいインスタンス GenerateWave(SoundFormat, int, WaveTypeBase) Generate the wave of wave type. 波形の種類に基づいて波形データの配列を生成するメソッド。 public override short[] GenerateWave(SoundFormat format, int tempo, WaveTypeBase waveType) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 waveType WaveTypeBase Type of wave. 波形の種類 Returns short[] Data of wave. 波形データ : short[] Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. GenerateWave(SoundFormat, int, int, WaveTypeBase) Generate the wave of wave type. 波形の種類に基づいて波形データの配列を生成するメソッド。 public override short[] GenerateWave(SoundFormat format, int tempo, int length, WaveTypeBase waveType) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 length int Length of the array. 配列の長さ waveType WaveTypeBase Type of wave. 波形の種類 Returns short[] Data of wave. 波形データ : short[] Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. ArgumentOutOfRangeException Length must be non-negative."
  },
  "api/SoundMaker.Sounds.Score.Rest.html": {
    "href": "api/SoundMaker.Sounds.Score.Rest.html",
    "title": "Class Rest | SoundMaker Documentation",
    "keywords": "Class Rest Namespace SoundMaker.Sounds.Score Assembly SoundMaker.dll The rest. 休符を表すクラス public class Rest : BasicSoundComponentBase, ISoundComponent Inheritance object BasicSoundComponentBase Rest Implements ISoundComponent Inherited Members BasicSoundComponentBase.Length BasicSoundComponentBase.IsDotted BasicSoundComponentBase.GetWaveArrayLength(SoundFormat, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Rest(LengthType, bool) The rest. 休符を表すクラス public Rest(LengthType length, bool isDotted = false) Parameters length LengthType Length (ex. \"quarter\" note). 長さ（音楽的な、「四分」音符、「全」休符のような長さを表す。） isDotted bool Is note/rest dotted. 付点かを表す論理型 Methods Clone() Creates a clone of the sound component. サウンドコンポーネントのクローンを作成するメソッド。 public override Rest Clone() Returns Rest A new instance of the sound component with the same properties. 同じプロパティを持つサウンドコンポーネントの新しいインスタンス GenerateWave(SoundFormat, int, WaveTypeBase) Generate the wave of wave type. 波形の種類に基づいて波形データの配列を生成するメソッド。 public override short[] GenerateWave(SoundFormat format, int tempo, WaveTypeBase waveType) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 waveType WaveTypeBase Type of wave. 波形の種類 Returns short[] Data of wave. 波形データ : short[] Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. GenerateWave(SoundFormat, int, int, WaveTypeBase) Generate the wave of wave type. 波形の種類に基づいて波形データの配列を生成するメソッド。 public override short[] GenerateWave(SoundFormat format, int tempo, int length, WaveTypeBase waveType) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 length int Length of the array. 配列の長さ waveType WaveTypeBase Type of wave. 波形の種類 Returns short[] Data of wave. 波形データ : short[] Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. ArgumentOutOfRangeException Length must be non-negative."
  },
  "api/SoundMaker.Sounds.Score.Scale.html": {
    "href": "api/SoundMaker.Sounds.Score.Scale.html",
    "title": "Enum Scale | SoundMaker Documentation",
    "keywords": "Enum Scale Namespace SoundMaker.Sounds.Score Assembly SoundMaker.dll Type of pitch of sound. 音の高さを表す列挙型 public enum Scale Fields A = 0 ラ ASharp = 1 ラ# B = 2 シ C = 3 ド CSharp = 4 ド# D = 5 レ DSharp = 6 レ# E = 7 ミ F = 8 ファ FSharp = 9 ファ# G = 10 ソ GSharp = 11 ソ#"
  },
  "api/SoundMaker.Sounds.Score.Tie.html": {
    "href": "api/SoundMaker.Sounds.Score.Tie.html",
    "title": "Class Tie | SoundMaker Documentation",
    "keywords": "Class Tie Namespace SoundMaker.Sounds.Score Assembly SoundMaker.dll Tie is joined two notes of same scale. タイ（同じ高さの音符同士を繋げて、あたかも一つの音符かのように扱う）を表すクラス public class Tie : ISoundComponent Inheritance object Tie Implements ISoundComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Tie(Note, LengthType, bool) Constructor. コンストラクタ public Tie(Note baseNote, LengthType additionalLength, bool additionalIsDotted = false) Parameters baseNote Note The note of base. 基本となる音符。二つ目の音符の音の高さはこの音符と同じになる。 additionalLength LengthType Length of the second note. (ex. \"quarter\" note). 二つ目の音符の長さ（音楽的な、「四分」音符、「全」休符のような長さを表す。） additionalIsDotted bool The second note/rest is dotted. 二つ目の音符が付点かを表す論理型 Tie(Note, IReadOnlyCollection<Note>) Constructor. コンストラクタ public Tie(Note baseNote, IReadOnlyCollection<Note> additionalNotes) Parameters baseNote Note The note of base. 基本となる音符。二つ目の音符の音の高さはこの音符と同じになる。 additionalNotes IReadOnlyCollection<Note> Notes of tie. 追加する音符 Properties AdditionalNotes The additional notes. 追加の音符のリスト public IReadOnlyCollection<Note> AdditionalNotes { get; } Property Value IReadOnlyCollection<Note> BaseNote The base note. 基本の音符 public Note BaseNote { get; } Property Value Note Count Count of notes. public int Count { get; } Property Value int Methods Clone() Creates a clone of the tie. タイのクローンを作成するメソッド。 public Tie Clone() Returns Tie A new instance of the tie with the same properties. 同じプロパティを持つタイの新しいインスタンス GenerateWave(SoundFormat, int, WaveTypeBase) Generate the wave of wave type. 波形の種類に基づいて波形データの配列を生成するメソッド。 public short[] GenerateWave(SoundFormat format, int tempo, WaveTypeBase waveType) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 waveType WaveTypeBase Type of wave. 波形の種類 Returns short[] Data of wave. 波形データ : short[] Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. GenerateWave(SoundFormat, int, int, WaveTypeBase) Generate the wave of wave type. 波形の種類に基づいて波形データの配列を生成するメソッド。 public short[] GenerateWave(SoundFormat format, int tempo, int length, WaveTypeBase waveType) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 length int Length of the array. 配列の長さ waveType WaveTypeBase Type of wave. 波形の種類 Returns short[] Data of wave. 波形データ : short[] Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. ArgumentOutOfRangeException Length must be non-negative. GetWaveArrayLength(SoundFormat, int) Return length of the sound array. 音の配列の長さを取得するメソッド。 public int GetWaveArrayLength(SoundFormat format, int tempo) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 Returns int Length of array. 配列の長さ : int Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0."
  },
  "api/SoundMaker.Sounds.Score.Tuplet.html": {
    "href": "api/SoundMaker.Sounds.Score.Tuplet.html",
    "title": "Class Tuplet | SoundMaker Documentation",
    "keywords": "Class Tuplet Namespace SoundMaker.Sounds.Score Assembly SoundMaker.dll Tuplet. 連符を表すクラス public class Tuplet : ISoundComponent Inheritance object Tuplet Implements ISoundComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Tuplet(IReadOnlyList<ISoundComponent>, LengthType, bool) Constructor. コンストラクタ public Tuplet(IReadOnlyList<ISoundComponent> tupletComponents, LengthType length, bool isDotted = false) Parameters tupletComponents IReadOnlyList<ISoundComponent> Components to be tuplet. 連符にする基本の音のリスト length LengthType Length (ex. \"quarter\" note). 長さ（音楽的な、「四分」音符、「全」休符のような長さを表す。） isDotted bool Tuplet is dotted. 付点かを表す論理型 Properties Count Count of components in this. コンポーネントの個数 public int Count { get; } Property Value int IsDotted Note/rest is dotted. 付点かを表す論理型 public bool IsDotted { get; } Property Value bool this[int] Get the component at index. index番目の連符の音を取得する。 public ISoundComponent this[int index] { get; } Parameters index int Index. 何番目かを表す整数 Property Value ISoundComponent Sound component. サウンドコンポーネント Exceptions IndexOutOfRangeException Index is less than 0 or index is equal to or greater than Count. Length Length (ex. \"quarter\" note). 長さ（音楽的な、「四分」音符、「全」休符のような長さを表す。） public LengthType Length { get; } Property Value LengthType Methods Clone() Creates a clone of the tuplet. 連符のクローンを作成するメソッド。 public Tuplet Clone() Returns Tuplet A new instance of the tuplet with the same properties. 同じプロパティを持つ連符の新しいインスタンス GenerateWave(SoundFormat, int, WaveTypeBase) Generate the wave of wave type. 波形の種類に基づいて波形データの配列を生成するメソッド。 public short[] GenerateWave(SoundFormat format, int tempo, WaveTypeBase waveType) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 waveType WaveTypeBase Type of wave. 波形の種類 Returns short[] Data of wave. 波形データ : short[] Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. GenerateWave(SoundFormat, int, int, WaveTypeBase) Generate the wave of wave type. 波形の種類に基づいて波形データの配列を生成するメソッド。 public short[] GenerateWave(SoundFormat format, int tempo, int length, WaveTypeBase waveType) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 length int Length of the array. 配列の長さ waveType WaveTypeBase Type of wave. 波形の種類 Returns short[] Data of wave. 波形データ : short[] Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. ArgumentOutOfRangeException Length must be non-negative. GetWaveArrayLength(SoundFormat, int) Return length of the sound array. 音の配列の長さを取得するメソッド。 public int GetWaveArrayLength(SoundFormat format, int tempo) Parameters format SoundFormat Format of the sound. 音のフォーマット tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 Returns int Length of array. 配列の長さ : int Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0."
  },
  "api/SoundMaker.Sounds.Score.html": {
    "href": "api/SoundMaker.Sounds.Score.html",
    "title": "Namespace SoundMaker.Sounds.Score | SoundMaker Documentation",
    "keywords": "Namespace SoundMaker.Sounds.Score Classes BasicSoundComponentBase Provides a base class for a basic sound component to inherit from. 音符・休符など音の基本部品を表す抽象基底クラス Note The note. 音符を表すクラス Rest The rest. 休符を表すクラス Tie Tie is joined two notes of same scale. タイ（同じ高さの音符同士を繋げて、あたかも一つの音符かのように扱う）を表すクラス Tuplet Tuplet. 連符を表すクラス Interfaces ISoundComponent Interface for sound components. 音の部品を表すインターフェイス Enums LengthType Type of length. (ex. \"quarter\" note). 長さのタイプを列挙（音楽的な、「四分」音符、「全」休符のような長さを表す。） Scale Type of pitch of sound. 音の高さを表す列挙型"
  },
  "api/SoundMaker.Sounds.SoundChannels.ISoundChannel.html": {
    "href": "api/SoundMaker.Sounds.SoundChannels.ISoundChannel.html",
    "title": "Interface ISoundChannel | SoundMaker Documentation",
    "keywords": "Interface ISoundChannel Namespace SoundMaker.Sounds.SoundChannels Assembly SoundMaker.dll public interface ISoundChannel : IEnumerable<ISoundComponent>, IEnumerable Inherited Members IEnumerable<ISoundComponent>.GetEnumerator() Properties Capacity The total number of sound components the internal data structure can hold without resizing. 内部リストがサイズを変えないで保持できるサウンドコンポーネントの個数 int Capacity { get; } Property Value int ComponentCount Count of sound components. サウンドコンポーネントの個数 int ComponentCount { get; } Property Value int Format Format of the sound. 音のフォーマット SoundFormat Format { get; } Property Value SoundFormat this[int] Get sound component at index. index番目のサウンドコンポーネントを取得する ISoundComponent this[int index] { get; } Parameters index int Index. 何番目かを表す整数 Property Value ISoundComponent Sound component. サウンドコンポーネント PanType Direction of hearing. ステレオサウンドの場合、左右どちらから音が出るか PanType PanType { get; } Property Value PanType Tempo Quarter note/rest per minute. 一分間の四分音符・休符の数 int Tempo { get; } Property Value int WaveArrayLength Length of wave data. 音の波形データを表す配列の長さ int WaveArrayLength { get; } Property Value int Methods Add(ISoundComponent) Add sound component to this. サウンドコンポーネントを追加するメソッド。 void Add(ISoundComponent component) Parameters component ISoundComponent The sound component to be added to this. 追加するサウンドコンポーネント Clear() Clear sound components in this. チャンネル内のサウンドコンポーネントを空にするメソッド。 void Clear() GenerateWave() Generate wave data. 音の波形データを生成するメソッド。 short[] GenerateWave() Returns short[] The array of wave data. 音の波形データの配列 : short[] RemoveAt(int) Remove the sound component at index. index番目のサウンドコンポーネントを削除するメソッド。 void RemoveAt(int index) Parameters index int The index of the sound component to remove. 削除するサウンドコンポーネントのインデックス"
  },
  "api/SoundMaker.Sounds.SoundChannels.LowBitNoiseSoundChannel.html": {
    "href": "api/SoundMaker.Sounds.SoundChannels.LowBitNoiseSoundChannel.html",
    "title": "Class LowBitNoiseSoundChannel | SoundMaker Documentation",
    "keywords": "Class LowBitNoiseSoundChannel Namespace SoundMaker.Sounds.SoundChannels Assembly SoundMaker.dll This generates low bit noise wave. ロービットノイズを生成するサウンドチャンネル public class LowBitNoiseSoundChannel : SoundChannelBase, ISoundChannel, IEnumerable<ISoundComponent>, IEnumerable Inheritance object SoundChannelBase LowBitNoiseSoundChannel Implements ISoundChannel IEnumerable<ISoundComponent> IEnumerable Inherited Members SoundChannelBase.SoundComponents SoundChannelBase.Format SoundChannelBase.PanType SoundChannelBase.Capacity SoundChannelBase.ComponentCount SoundChannelBase.Tempo SoundChannelBase.WaveArrayLength SoundChannelBase.this[int] SoundChannelBase.Add(ISoundComponent) SoundChannelBase.Clear() SoundChannelBase.RemoveAt(int) SoundChannelBase.Import(IEnumerable<ISoundComponent>) SoundChannelBase.FadeInOut(short[]) SoundChannelBase.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LowBitNoiseSoundChannel(int, SoundFormat, PanType) Constructor. コンストラクタ public LowBitNoiseSoundChannel(int tempo, SoundFormat format, PanType panType) Parameters tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 format SoundFormat Format of the sound. 音のフォーマット panType PanType Sound direction. 左右どちらから音が出るか Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. LowBitNoiseSoundChannel(int, SoundFormat, PanType, int) Constructor. コンストラクタ public LowBitNoiseSoundChannel(int tempo, SoundFormat format, PanType panType, int capacity) Parameters tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 format SoundFormat Format of the sound. 音のフォーマット panType PanType Sound direction. 左右どちらから音が出るか capacity int The total number of sound components the internal data structure can hold without resizing. 内部データ構造がリサイズされずに保持できるサウンドコンポーネントの総数。 Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. ArgumentOutOfRangeException Capacity must be non-negative. Methods GenerateWave() Generate wave data. 音の波形データを生成するメソッド。 public override short[] GenerateWave() Returns short[] The array of wave data. 音の波形データの配列 : short[]"
  },
  "api/SoundMaker.Sounds.SoundChannels.PanType.html": {
    "href": "api/SoundMaker.Sounds.SoundChannels.PanType.html",
    "title": "Enum PanType | SoundMaker Documentation",
    "keywords": "Enum PanType Namespace SoundMaker.Sounds.SoundChannels Assembly SoundMaker.dll Direction of hearing. 左右どちらから音が出るかを表す列挙型 public enum PanType Fields Both = 0 Both. 左右両方 Left = 2 Left. 左 Right = 1 Right. 右"
  },
  "api/SoundMaker.Sounds.SoundChannels.PseudoTriangleSoundChannel.html": {
    "href": "api/SoundMaker.Sounds.SoundChannels.PseudoTriangleSoundChannel.html",
    "title": "Class PseudoTriangleSoundChannel | SoundMaker Documentation",
    "keywords": "Class PseudoTriangleSoundChannel Namespace SoundMaker.Sounds.SoundChannels Assembly SoundMaker.dll public class PseudoTriangleSoundChannel : SoundChannelBase, ISoundChannel, IEnumerable<ISoundComponent>, IEnumerable Inheritance object SoundChannelBase PseudoTriangleSoundChannel Implements ISoundChannel IEnumerable<ISoundComponent> IEnumerable Inherited Members SoundChannelBase.SoundComponents SoundChannelBase.Format SoundChannelBase.PanType SoundChannelBase.Capacity SoundChannelBase.ComponentCount SoundChannelBase.Tempo SoundChannelBase.WaveArrayLength SoundChannelBase.this[int] SoundChannelBase.Add(ISoundComponent) SoundChannelBase.Clear() SoundChannelBase.RemoveAt(int) SoundChannelBase.Import(IEnumerable<ISoundComponent>) SoundChannelBase.FadeInOut(short[]) SoundChannelBase.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PseudoTriangleSoundChannel(int, SoundFormat, PanType) Constructor. コンストラクタ public PseudoTriangleSoundChannel(int tempo, SoundFormat format, PanType panType) Parameters tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 format SoundFormat Format of the sound. 音のフォーマット panType PanType Sound direction. 左右どちらから音が出るか Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. PseudoTriangleSoundChannel(int, SoundFormat, PanType, int) Constructor. コンストラクタ public PseudoTriangleSoundChannel(int tempo, SoundFormat format, PanType panType, int capacity) Parameters tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 format SoundFormat Format of the sound. 音のフォーマット panType PanType Sound direction. 左右どちらから音が出るか capacity int The total number of sound components the internal data structure can hold without resizing. 内部データ構造がリサイズされずに保持できるサウンドコンポーネントの総数。 Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. ArgumentOutOfRangeException Capacity must be non-negative. Methods GenerateWave() Generate wave data. 音の波形データを生成するメソッド。 public override short[] GenerateWave() Returns short[] The array of wave data. 音の波形データの配列 : short[]"
  },
  "api/SoundMaker.Sounds.SoundChannels.SoundChannelBase.html": {
    "href": "api/SoundMaker.Sounds.SoundChannels.SoundChannelBase.html",
    "title": "Class SoundChannelBase | SoundMaker Documentation",
    "keywords": "Class SoundChannelBase Namespace SoundMaker.Sounds.SoundChannels Assembly SoundMaker.dll Sound channel base. サウンドチャンネルの抽象基底クラス。 public abstract class SoundChannelBase : ISoundChannel, IEnumerable<ISoundComponent>, IEnumerable Inheritance object SoundChannelBase Implements ISoundChannel IEnumerable<ISoundComponent> IEnumerable Derived LowBitNoiseSoundChannel PseudoTriangleSoundChannel SquareSoundChannel TriangleSoundChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SoundChannelBase(int, SoundFormat, PanType) Constructor. コンストラクタ。 public SoundChannelBase(int tempo, SoundFormat format, PanType panType) Parameters tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 format SoundFormat Format of the sound. 音のフォーマット panType PanType Pan of the sound. 左右どちらから音が出るか Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. SoundChannelBase(int, SoundFormat, PanType, int) Constructor. コンストラクタ。 public SoundChannelBase(int tempo, SoundFormat format, PanType panType, int capacity) Parameters tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 format SoundFormat Format of the sound. 音のフォーマット panType PanType Direction of hearing. 左右どちらから音が出るか capacity int The total number of sound components the internal data structure can hold without resizing. 内部データ構造がリサイズされずに保持できるサウンドコンポーネントの総数。 Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. ArgumentOutOfRangeException Capacity must be non-negative. Properties Capacity The total number of sound components the internal data structure can hold without resizing. 内部リストがサイズを変えないで保持できるサウンドコンポーネントの個数 public int Capacity { get; } Property Value int ComponentCount Count of sound components. サウンドコンポーネントの個数 public int ComponentCount { get; } Property Value int Format Format of the sound. 音のフォーマット public SoundFormat Format { get; } Property Value SoundFormat this[int] Get sound component at index. index番目のサウンドコンポーネントを取得する public ISoundComponent this[int index] { get; } Parameters index int Index. 何番目かを表す整数 Property Value ISoundComponent Sound component. サウンドコンポーネント Exceptions IndexOutOfRangeException Index is less than 0 or index is equal to or greater than ComponentCount. PanType Direction of hearing. ステレオサウンドの場合、左右どちらから音が出るか public PanType PanType { get; } Property Value PanType SoundComponents List of sound components. サウンドコンポーネントのリスト protected List<ISoundComponent> SoundComponents { get; } Property Value List<ISoundComponent> Tempo Quarter note/rest per minute. 一分間の四分音符・休符の数 public int Tempo { get; } Property Value int WaveArrayLength Length of wave data. 音の波形データを表す配列の長さ public int WaveArrayLength { get; } Property Value int Methods Add(ISoundComponent) Add sound component to this. サウンドコンポーネントを追加するメソッド。 public void Add(ISoundComponent component) Parameters component ISoundComponent The sound component to be added to this. 追加するサウンドコンポーネント Clear() Clear sound components in this. チャンネル内のサウンドコンポーネントを空にするメソッド。 public void Clear() FadeInOut(short[]) protected void FadeInOut(short[] wave) Parameters wave short[] GenerateWave() Generate wave data. 音の波形データを生成するメソッド。 public abstract short[] GenerateWave() Returns short[] The array of wave data. 音の波形データの配列 : short[] GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<ISoundComponent> GetEnumerator() Returns IEnumerator<ISoundComponent> An enumerator that can be used to iterate through the collection. Import(IEnumerable<ISoundComponent>) Import sound components. サウンドコンポーネントをインポートする。 public void Import(IEnumerable<ISoundComponent> components) Parameters components IEnumerable<ISoundComponent> Sound components. サウンドコンポーネント RemoveAt(int) Remove the sound component at index. index番目のサウンドコンポーネントを削除するメソッド。 public void RemoveAt(int index) Parameters index int The index of the sound component to remove. 削除するサウンドコンポーネントのインデックス Exceptions ArgumentOutOfRangeException Index is less than 0 or index is equal to or greater than ComponentCount."
  },
  "api/SoundMaker.Sounds.SoundChannels.SquareSoundChannel.html": {
    "href": "api/SoundMaker.Sounds.SoundChannels.SquareSoundChannel.html",
    "title": "Class SquareSoundChannel | SoundMaker Documentation",
    "keywords": "Class SquareSoundChannel Namespace SoundMaker.Sounds.SoundChannels Assembly SoundMaker.dll This generates square wave. 矩形波を生成するサウンドチャンネル public class SquareSoundChannel : SoundChannelBase, ISoundChannel, IEnumerable<ISoundComponent>, IEnumerable Inheritance object SoundChannelBase SquareSoundChannel Implements ISoundChannel IEnumerable<ISoundComponent> IEnumerable Inherited Members SoundChannelBase.SoundComponents SoundChannelBase.Format SoundChannelBase.PanType SoundChannelBase.Capacity SoundChannelBase.ComponentCount SoundChannelBase.Tempo SoundChannelBase.WaveArrayLength SoundChannelBase.this[int] SoundChannelBase.Add(ISoundComponent) SoundChannelBase.Clear() SoundChannelBase.RemoveAt(int) SoundChannelBase.Import(IEnumerable<ISoundComponent>) SoundChannelBase.FadeInOut(short[]) SoundChannelBase.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SquareSoundChannel(int, SoundFormat, SquareWaveRatio, PanType) Constructor. コンストラクタ public SquareSoundChannel(int tempo, SoundFormat format, SquareWaveRatio ratio, PanType panType) Parameters tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 format SoundFormat Format of the sound. 音のフォーマット ratio SquareWaveRatio Duty cycle. デューティ比 panType PanType Pan of the sound. 左右どちらから音が出るか Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. SquareSoundChannel(int, SoundFormat, SquareWaveRatio, PanType, int) Constructor. コンストラクタ public SquareSoundChannel(int tempo, SoundFormat format, SquareWaveRatio ratio, PanType panType, int capacity) Parameters tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 format SoundFormat Format of the sound. 音のフォーマット ratio SquareWaveRatio Duty cycle. デューティ比 panType PanType Pan of the sound. 左右どちらから音が出るか capacity int The total number of sound components the internal data structure can hold without resizing. 内部データ構造がリサイズされずに保持できるサウンドコンポーネントの総数。 Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. ArgumentOutOfRangeException Capacity must be non-negative. Methods GenerateWave() Generate wave data. 音の波形データを生成するメソッド。 public override short[] GenerateWave() Returns short[] The array of wave data. 音の波形データの配列 : short[]"
  },
  "api/SoundMaker.Sounds.SoundChannels.SquareWaveRatio.html": {
    "href": "api/SoundMaker.Sounds.SoundChannels.SquareWaveRatio.html",
    "title": "Enum SquareWaveRatio | SoundMaker Documentation",
    "keywords": "Enum SquareWaveRatio Namespace SoundMaker.Sounds.SoundChannels Assembly SoundMaker.dll Type of duty cycle. デューティ比の列挙型 public enum SquareWaveRatio Fields Point125 = 0 12.5% Point25 = 1 25% Point5 = 2 50%"
  },
  "api/SoundMaker.Sounds.SoundChannels.TriangleSoundChannel.html": {
    "href": "api/SoundMaker.Sounds.SoundChannels.TriangleSoundChannel.html",
    "title": "Class TriangleSoundChannel | SoundMaker Documentation",
    "keywords": "Class TriangleSoundChannel Namespace SoundMaker.Sounds.SoundChannels Assembly SoundMaker.dll This generates triangle wave. 三角波を生成するチャンネル。 public class TriangleSoundChannel : SoundChannelBase, ISoundChannel, IEnumerable<ISoundComponent>, IEnumerable Inheritance object SoundChannelBase TriangleSoundChannel Implements ISoundChannel IEnumerable<ISoundComponent> IEnumerable Inherited Members SoundChannelBase.SoundComponents SoundChannelBase.Format SoundChannelBase.PanType SoundChannelBase.Capacity SoundChannelBase.ComponentCount SoundChannelBase.Tempo SoundChannelBase.WaveArrayLength SoundChannelBase.this[int] SoundChannelBase.Add(ISoundComponent) SoundChannelBase.Clear() SoundChannelBase.RemoveAt(int) SoundChannelBase.Import(IEnumerable<ISoundComponent>) SoundChannelBase.FadeInOut(short[]) SoundChannelBase.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TriangleSoundChannel(int, SoundFormat, PanType) Constructor. コンストラクタ public TriangleSoundChannel(int tempo, SoundFormat format, PanType panType) Parameters tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 format SoundFormat Format of the sound. 音のフォーマット panType PanType Sound direction. 左右どちらから音が出るか Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. TriangleSoundChannel(int, SoundFormat, PanType, int) Constructor. コンストラクタ public TriangleSoundChannel(int tempo, SoundFormat format, PanType panType, int capacity) Parameters tempo int Quarter note/rest per minute. 一分間の四分音符・休符の数 format SoundFormat Format of the sound. 音のフォーマット panType PanType Sound direction. 左右どちらから音が出るか capacity int The total number of sound components the internal data structure can hold without resizing. 内部データ構造がリサイズされずに保持できるサウンドコンポーネントの総数。 Exceptions ArgumentOutOfRangeException Tempo must be non-negative and greater than 0. ArgumentOutOfRangeException Capacity must be non-negative. Methods GenerateWave() Generate wave data. 音の波形データを生成するメソッド。 public override short[] GenerateWave() Returns short[] The array of wave data. 音の波形データの配列 : short[]"
  },
  "api/SoundMaker.Sounds.SoundChannels.html": {
    "href": "api/SoundMaker.Sounds.SoundChannels.html",
    "title": "Namespace SoundMaker.Sounds.SoundChannels | SoundMaker Documentation",
    "keywords": "Namespace SoundMaker.Sounds.SoundChannels Classes LowBitNoiseSoundChannel This generates low bit noise wave. ロービットノイズを生成するサウンドチャンネル PseudoTriangleSoundChannel SoundChannelBase Sound channel base. サウンドチャンネルの抽象基底クラス。 SquareSoundChannel This generates square wave. 矩形波を生成するサウンドチャンネル TriangleSoundChannel This generates triangle wave. 三角波を生成するチャンネル。 Interfaces ISoundChannel Enums PanType Direction of hearing. 左右どちらから音が出るかを表す列挙型 SquareWaveRatio Type of duty cycle. デューティ比の列挙型"
  },
  "api/SoundMaker.Sounds.SoundDirectionType.html": {
    "href": "api/SoundMaker.Sounds.SoundDirectionType.html",
    "title": "Enum SoundDirectionType | SoundMaker Documentation",
    "keywords": "Enum SoundDirectionType Namespace SoundMaker.Sounds Assembly SoundMaker.dll The type which is expressed direction of the sound. ステレオ音声で音が聞こえる方向の種類を表す列挙型 public enum SoundDirectionType Fields Both = 0 Both. 左右両方 Left = 2 Left. 左 Right = 1 Right. 右"
  },
  "api/SoundMaker.Sounds.SoundFormat.html": {
    "href": "api/SoundMaker.Sounds.SoundFormat.html",
    "title": "Struct SoundFormat | SoundMaker Documentation",
    "keywords": "Struct SoundFormat Namespace SoundMaker.Sounds Assembly SoundMaker.dll Format of the sound. 音のフォーマットを表す構造体 public readonly struct SoundFormat Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SoundFormat(SamplingFrequencyType, BitRateType, ChannelType) Constructor. コンストラクタ public SoundFormat(SamplingFrequencyType samplingFrequency, BitRateType bitRate, ChannelType channel) Parameters samplingFrequency SamplingFrequencyType Sampling frequency. サンプリング周波数 bitRate BitRateType Bit rate. 量子化ビット数 channel ChannelType Type of channels count. チャンネル数 Properties BitRate Bit rate. 量子化ビット数 public BitRateType BitRate { get; } Property Value BitRateType Channel Type of channels count. チャンネル数 public ChannelType Channel { get; } Property Value ChannelType SamplingFrequency Sampling frequency. サンプリング周波数 public SamplingFrequencyType SamplingFrequency { get; } Property Value SamplingFrequencyType"
  },
  "api/SoundMaker.Sounds.StereoMixer.html": {
    "href": "api/SoundMaker.Sounds.StereoMixer.html",
    "title": "Class StereoMixer | SoundMaker Documentation",
    "keywords": "Class StereoMixer Namespace SoundMaker.Sounds Assembly SoundMaker.dll Mix waves to stereo wave. ステレオ音声をミックスするクラス。 public class StereoMixer : MixerBase Inheritance object MixerBase StereoMixer Inherited Members MixerBase.Channels MixerBase.Format MixerBase.GetMaxWaveLength() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StereoMixer(IReadOnlyList<ISoundChannel>) Mix waves to stereo wave. ステレオ音声をミックスするクラス。 public StereoMixer(IReadOnlyList<ISoundChannel> channels) Parameters channels IReadOnlyList<ISoundChannel> Channels. チャンネルのリスト Methods Mix() Mix. ミックスするメソッド。 public StereoWave Mix() Returns StereoWave Stereo wave data. ステレオ波形データ"
  },
  "api/SoundMaker.Sounds.StereoWave.html": {
    "href": "api/SoundMaker.Sounds.StereoWave.html",
    "title": "Class StereoWave | SoundMaker Documentation",
    "keywords": "Class StereoWave Namespace SoundMaker.Sounds Assembly SoundMaker.dll Stereo wave. ステレオ波形データのクラス public class StereoWave : IWave Inheritance object StereoWave Implements IWave Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StereoWave(IReadOnlyCollection<short>, IReadOnlyCollection<short>) Constructor. コンストラクタ public StereoWave(IReadOnlyCollection<short> rightWave, IReadOnlyCollection<short> leftWave) Parameters rightWave IReadOnlyCollection<short> The wave of right. 右の波形データ leftWave IReadOnlyCollection<short> The wave of left. 左の波形データ Properties LeftVolume public int LeftVolume { get; } Property Value int RightVolume public int RightVolume { get; } Property Value int Methods Append(StereoWave) Append wave to this. 別のステレオ波形を末尾に繋げるメソッド。 public void Append(StereoWave wave) Parameters wave StereoWave Wave. 波形 ChangeVolume(int, SoundDirectionType) Change the volume. 音量を変更するメソッド。 public void ChangeVolume(int volume, SoundDirectionType channelType) Parameters volume int Volume (0 ~ 100). 音量(0 ~ 100) channelType SoundDirectionType Channel to change the sound. 左右・両方の中から音量を変更するものを選ぶ GetBytes(BitRateType) Get byte array of the wave. 波形データのバイト列を取得するメソッド。 public byte[] GetBytes(BitRateType bitRate) Parameters bitRate BitRateType Bitrate of the sound. 量子化ビット数 Returns byte[] Byte array of wave data. 波形データのバイト列 : byte[] GetLeftWave() Get the wave on the left. 左側のチャンネルの音の波形データを取得するメソッド。 public short[] GetLeftWave() Returns short[] The wave on the left. 左側のチャンネルの音の波形データ : short[] GetLengthOfBytes(BitRateType) Get the length of bytes of wave data. 波形データのバイト列の長さを取得するメソッド。 public int GetLengthOfBytes(BitRateType bitRate) Parameters bitRate BitRateType Quantization bit rate. 量子化ビット数 Returns int Length of bytes of wave data. GetRightWave() Get the wave on the right. 右側のチャンネルの音の波形データを取得するメソッド。 public short[] GetRightWave() Returns short[] The wave on the right. 右側のチャンネルの音の波形データ : short[]"
  },
  "api/SoundMaker.Sounds.Track.html": {
    "href": "api/SoundMaker.Sounds.Track.html",
    "title": "Class Track | SoundMaker Documentation",
    "keywords": "Class Track Namespace SoundMaker.Sounds Assembly SoundMaker.dll Represents a track with a specific wave type. 特定の波形タイプを持つトラックを表すクラス。 public class Track Inheritance object Track Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count Count of sound components. サウンドコンポーネントの数 public int Count { get; } Property Value int Pan 左右の音量バランスを取得または設定するプロパティ。 -1.0が左、1.0が右側。 Gets or sets the left-right audio balance. Takes values from -1.0 (left) to 1.0 (right). public double Pan { get; set; } Property Value double SoundComponents Sound components サウンドコンポーネント public IReadOnlyList<ISoundComponent> SoundComponents { get; } Property Value IReadOnlyList<ISoundComponent> WaveArrayLength Gets the length of the wave array. 波形配列の長さを取得するプロパティ。 public int WaveArrayLength { get; set; } Property Value int WaveType Gets or sets the wave type. 波形タイプを取得または設定するプロパティ。 public WaveTypeBase WaveType { get; set; } Property Value WaveTypeBase Methods Add(ISoundComponent) Adds a sound component to the track. トラックにサウンドコンポーネントを追加するメソッド。 public void Add(ISoundComponent component) Parameters component ISoundComponent The sound component to add. 追加するサウンドコンポーネント。 Clear() Clears all sound components from the track. トラックからすべてのサウンドコンポーネントをクリアするメソッド。 public void Clear() GeneratePartialWave(int, int) Generates the waveform data for the specified range. 指定した範囲の波形データを生成するメソッド。 public short[] GeneratePartialWave(int startIndex, int endIndex) Parameters startIndex int The starting index of the range. 範囲の開始インデックス。 endIndex int The ending index of the range. 範囲の終了インデックス。 Returns short[] The waveform data for the specified range. 指定範囲の波形データ。 GenerateWave() Generates a wave based on the sound components. サウンドコンポーネントに基づいて波形を生成するメソッド。 public short[] GenerateWave() Returns short[] An array of shorts representing the generated wave. 生成された波形を表すショート型の配列。 Import(IEnumerable<ISoundComponent>) Imports a collection of sound components into the track. トラックにサウンドコンポーネントのコレクションをインポートするメソッド。 public void Import(IEnumerable<ISoundComponent> components) Parameters components IEnumerable<ISoundComponent> The collection of sound components to import. インポートするサウンドコンポーネントのコレクション。 Insert(int, ISoundComponent) Inserts a sound component at the specified index. 指定されたインデックスにサウンドコンポーネントを挿入するメソッド。 public void Insert(int index, ISoundComponent component) Parameters index int The zero-based index at which the component should be inserted. コンポーネントを挿入するゼロベースのインデックス。 component ISoundComponent The sound component to insert. 挿入するサウンドコンポーネント。 Exceptions ArgumentOutOfRangeException Thrown when the index is out of range. インデックスが範囲外の場合にスローされる例外。 Remove(ISoundComponent) Removes a specified sound component. 指定されたサウンドコンポーネントを削除するメソッド。 public bool Remove(ISoundComponent component) Parameters component ISoundComponent The sound component to remove. 削除するサウンドコンポーネント。 Returns bool True if the component was removed; otherwise, false. コンポーネントが削除された場合は true、それ以外の場合は false。 RemoveAt(int) Removes a sound component at the specified index. 指定されたインデックスのサウンドコンポーネントを削除するメソッド。 public void RemoveAt(int index) Parameters index int The index of the sound component to remove. 削除するサウンドコンポーネントのインデックス。 Exceptions ArgumentOutOfRangeException Thrown when the index is out of range. インデックスが範囲外の場合にスローされる例外。"
  },
  "api/SoundMaker.Sounds.TrackBaseSound.html": {
    "href": "api/SoundMaker.Sounds.TrackBaseSound.html",
    "title": "Class TrackBaseSound | SoundMaker Documentation",
    "keywords": "Class TrackBaseSound Namespace SoundMaker.Sounds Assembly SoundMaker.dll Initializes a new instance of the TrackBaseSound class with the specified format and tempo. 指定されたフォーマットとテンポでTrackBaseSoundクラスの新しいインスタンスを初期化するメソッド。 public class TrackBaseSound Inheritance object TrackBaseSound Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TrackBaseSound(SoundFormat, int) Initializes a new instance of the TrackBaseSound class with the specified format and tempo. 指定されたフォーマットとテンポでTrackBaseSoundクラスの新しいインスタンスを初期化するメソッド。 public TrackBaseSound(SoundFormat format, int tempo) Parameters format SoundFormat The sound format to be used. 使用するサウンドフォーマット。 tempo int The tempo of the track. トラックのテンポ。 Properties Format Gets the sound format. サウンドフォーマットを取得するプロパティ。 public SoundFormat Format { get; } Property Value SoundFormat Tempo Gets the tempo value. テンポの値を取得するプロパティ。 public int Tempo { get; } Property Value int Methods Clear() Clears all tracks. すべてのトラックをクリアするメソッド。 public void Clear() CopyTrack(Track, int) Creates a copy of the specified track at a new start time. 指定されたトラックのコピーを新しい開始時間に作成するメソッド。 public Track CopyTrack(Track sourceTrack, int newStartIndex) Parameters sourceTrack Track The track to copy. コピーするトラック。 newStartIndex int The new start time in index. 新しい開始時間（インデクス）。 Returns Track A new instance of the copied track. コピーされたトラックの新しいインスタンス。 CreateTrack(int, WaveTypeBase) Creates a new track with the specified wave type and start time. 指定された波の種類と開始時間で新しいトラックを作成するメソッド。 public Track CreateTrack(int startIndex, WaveTypeBase waveType) Parameters startIndex int The start time in index. 開始時間（インデクス）。 waveType WaveTypeBase The type of wave. 波の種類。 Returns Track A new instance of the track. 新しいトラックのインスタンス。 GenerateBufferedMonauralWave(int, int) Generates buffered monaural waves from the tracks, starting at the specified index and using the specified buffer size. 指定した開始インデックスから指定したバッファサイズを使用して、トラックからバッファリングされたモノラル波を生成するメソッド。 public IEnumerable<MonauralWave> GenerateBufferedMonauralWave(int startIndex, int bufferSize) Parameters startIndex int The starting index for the buffer. バッファの開始インデックス。 bufferSize int The size of the buffer. バッファのサイズ。 Returns IEnumerable<MonauralWave> An enumerable collection of buffered monaural waves. バッファリングされたモノラル波の列挙可能なコレクション。 GenerateBufferedStereoWave(int, int) Generates buffered stereo waves from the tracks, starting at the specified index and using the specified buffer size. 指定した開始インデックスから指定したバッファサイズを使用して、トラックからバッファリングされたステレオ波を生成するメソッド。 public IEnumerable<StereoWave> GenerateBufferedStereoWave(int startIndex, int bufferSize) Parameters startIndex int The starting index for the buffer. バッファの開始インデックス。 bufferSize int The size of the buffer. バッファのサイズ。 Returns IEnumerable<StereoWave> An enumerable collection of buffered stereo waves. バッファリングされたステレオ波の列挙可能なコレクション。 GenerateMonauralWave() Generates a monaural wave from the tracks. トラックからモノラル波を生成するメソッド。 public MonauralWave GenerateMonauralWave() Returns MonauralWave A monaural wave. モノラル波。 GenerateStereoWave() Generates a stereo wave from the tracks. トラックからステレオ波を生成するメソッド。 public StereoWave GenerateStereoWave() Returns StereoWave A stereo wave. ステレオ波。 GetAllTracks() Retrieves all tracks. すべてのトラックを取得するメソッド。 public IEnumerable<Track> GetAllTracks() Returns IEnumerable<Track> An enumerable collection of tracks. トラックの列挙可能なコレクションを返します。 GetTracks(int) Gets the list of tracks at the specified start time. 指定された開始時間のトラックのリストを取得するメソッド。 public List<Track> GetTracks(int startIndex) Parameters startIndex int The start time in index. 開始時間（インデクス）。 Returns List<Track> A list of tracks. トラックのリスト。 If the operation fails, an empty list is returned. 失敗時は空リスト。 Import(IEnumerable<Track>) Imports tracks into the internal map based on their start times. トラックを開始時間に基づいて内部のマップにインポートするメソッド。 public void Import(IEnumerable<Track> from) Parameters from IEnumerable<Track> The tracks to import. インポートするトラック。 MoveTrack(Track, int) Moves a track to a new start time. トラックを新しい開始時間に移動するメソッド。 public bool MoveTrack(Track track, int newStartIndex) Parameters track Track The track to move. 移動するトラック。 newStartIndex int The new start time in index. 新しい開始時間（インデクス）。 Returns bool True if the track was moved; otherwise, false. トラックが移動された場合は true、それ以外の場合は false。 RemoveTrack(Track) Removes the specified track. 指定されたトラックを削除するメソッド。 public bool RemoveTrack(Track track) Parameters track Track The track to remove. 削除するトラック。 Returns bool True if the track was removed; otherwise, false. トラックが削除された場合は true、それ以外の場合は false。 RemoveTracksAt(int) Removes all tracks at the specified start time. 指定された開始時間のすべてのトラックを削除するメソッド。 public bool RemoveTracksAt(int startIndex) Parameters startIndex int The start time in index. 開始時間（インデクス）。 Returns bool True if tracks were removed; otherwise, false. トラックが削除された場合は true、それ以外の場合は false。 TryGetTracks(int, out List<Track>) Tries to get the list of tracks at the specified start time. 指定された開始時間のトラックのリストを取得しようとするメソッド。 public bool TryGetTracks(int startIndex, out List<Track> tracks) Parameters startIndex int The start time in index. 開始時間（インデクス）。 tracks List<Track> The list of tracks. トラックのリスト。 Returns bool True if tracks were found; otherwise, false. トラックが見つかった場合は true、それ以外の場合は false。"
  },
  "api/SoundMaker.Sounds.WaveTypes.LowBitNoiseWave.html": {
    "href": "api/SoundMaker.Sounds.WaveTypes.LowBitNoiseWave.html",
    "title": "Class LowBitNoiseWave | SoundMaker Documentation",
    "keywords": "Class LowBitNoiseWave Namespace SoundMaker.Sounds.WaveTypes Assembly SoundMaker.dll The low bit noise. ロービットノイズ public class LowBitNoiseWave : WaveTypeBase Inheritance object WaveTypeBase LowBitNoiseWave Inherited Members WaveTypeBase.CheckGenerateWaveArgs(int, int, double) WaveTypeBase.CheckGenerateUnitWaveArgs(int, double) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GenerateWave(SoundFormat, int, int, double) Generate array of wave data. 波形データの配列を生成する。 public override short[] GenerateWave(SoundFormat format, int length, int volume, double hertz) Parameters format SoundFormat format of the sound. 音のフォーマット length int length of the array. 配列の長さ volume int volume 音量（0 ~ 100） hertz double hertz of the sound. 音の周波数 Returns short[] the array of wave data. : short[] Exceptions ArgumentOutOfRangeException Length must be non-negative. ArgumentOutOfRangeException Hertz must be non-negative and greater than 0. ArgumentOutOfRangeException Volume must be below than 100 and more than 0."
  },
  "api/SoundMaker.Sounds.WaveTypes.PseudoTriangleWave.html": {
    "href": "api/SoundMaker.Sounds.WaveTypes.PseudoTriangleWave.html",
    "title": "Class PseudoTriangleWave | SoundMaker Documentation",
    "keywords": "Class PseudoTriangleWave Namespace SoundMaker.Sounds.WaveTypes Assembly SoundMaker.dll The pseudo triangle wave. 疑似三角波 public class PseudoTriangleWave : WaveTypeBase Inheritance object WaveTypeBase PseudoTriangleWave Inherited Members WaveTypeBase.CheckGenerateWaveArgs(int, int, double) WaveTypeBase.CheckGenerateUnitWaveArgs(int, double) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GenerateUnitWave(SoundFormat, int, double) Generates one cycle of a sound waveform at the specified frequency. 指定した周波数の音声波形1周期分を生成する。 public short[] GenerateUnitWave(SoundFormat format, int volume, double hertz) Parameters format SoundFormat Format of the sound. 音のフォーマット volume int Volume. 音量（0 ~ 100） hertz double Hertz of the sound. 音の周波数 Returns short[] The array of wave data. 波形データの配列 : short[] Exceptions ArgumentOutOfRangeException Hertz must be non-negative and greater than 0. ArgumentOutOfRangeException Volume must be below 100 and above 0. GenerateWave(SoundFormat, int, int, double) Generate array of wave data. 波形データの配列を生成する。 public override short[] GenerateWave(SoundFormat format, int length, int volume, double hertz) Parameters format SoundFormat format of the sound. 音のフォーマット length int length of the array. 配列の長さ volume int volume 音量（0 ~ 100） hertz double hertz of the sound. 音の周波数 Returns short[] the array of wave data. : short[] Exceptions ArgumentOutOfRangeException Length must be non-negative. ArgumentOutOfRangeException Hertz must be non-negative and greater than 0. ArgumentOutOfRangeException Volume must be below than 100 and more than 0."
  },
  "api/SoundMaker.Sounds.WaveTypes.SquareWave.html": {
    "href": "api/SoundMaker.Sounds.WaveTypes.SquareWave.html",
    "title": "Class SquareWave | SoundMaker Documentation",
    "keywords": "Class SquareWave Namespace SoundMaker.Sounds.WaveTypes Assembly SoundMaker.dll The square wave. 矩形波 public class SquareWave : WaveTypeBase Inheritance object WaveTypeBase SquareWave Inherited Members WaveTypeBase.CheckGenerateWaveArgs(int, int, double) WaveTypeBase.CheckGenerateUnitWaveArgs(int, double) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SquareWave(SquareWaveRatio) Constructor. コンストラクタ public SquareWave(SquareWaveRatio squareWaveRatio) Parameters squareWaveRatio SquareWaveRatio Duty cycle. デューティ比 Methods GenerateUnitWave(SoundFormat, int, double) Generates one cycle of a sound waveform at the specified frequency. 指定した周波数の音声波形1周期分を生成する。 public short[] GenerateUnitWave(SoundFormat format, int volume, double hertz) Parameters format SoundFormat Format of the sound. 音のフォーマット volume int Volume. 音量（0 ~ 100） hertz double Hertz of the sound. 音の周波数 Returns short[] The array of wave data. 波形データの配列 : short[] Exceptions ArgumentOutOfRangeException Hertz must be non-negative and greater than 0. ArgumentOutOfRangeException Volume must be below 100 and above 0. GenerateWave(SoundFormat, int, int, double) Generate array of wave data. 波形データの配列を生成する。 public override short[] GenerateWave(SoundFormat format, int length, int volume, double hertz) Parameters format SoundFormat format of the sound. 音のフォーマット length int length of the array. 配列の長さ volume int volume 音量（0 ~ 100） hertz double hertz of the sound. 音の周波数 Returns short[] the array of wave data. : short[] Exceptions ArgumentOutOfRangeException Length must be non-negative. ArgumentOutOfRangeException Hertz must be non-negative and greater than 0. ArgumentOutOfRangeException Volume must be below than 100 and more than 0."
  },
  "api/SoundMaker.Sounds.WaveTypes.TriangleWave.html": {
    "href": "api/SoundMaker.Sounds.WaveTypes.TriangleWave.html",
    "title": "Class TriangleWave | SoundMaker Documentation",
    "keywords": "Class TriangleWave Namespace SoundMaker.Sounds.WaveTypes Assembly SoundMaker.dll The triangle wave. 三角波 public class TriangleWave : WaveTypeBase Inheritance object WaveTypeBase TriangleWave Inherited Members WaveTypeBase.CheckGenerateWaveArgs(int, int, double) WaveTypeBase.CheckGenerateUnitWaveArgs(int, double) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GenerateUnitWave(SoundFormat, int, double) Generates one cycle of a sound waveform at the specified frequency. 指定した周波数の音声波形1周期分を生成する。 public short[] GenerateUnitWave(SoundFormat format, int volume, double hertz) Parameters format SoundFormat Format of the sound. 音のフォーマット volume int Volume 音量（0 ~ 100） hertz double Hertz of the sound. 音の周波数 Returns short[] The array of wave data. Exceptions ArgumentOutOfRangeException Hertz must be non-negative and greater than 0. ArgumentOutOfRangeException Volume must be below 100 and above 0. GenerateWave(SoundFormat, int, int, double) Generate array of wave data. 波形データの配列を生成する。 public override short[] GenerateWave(SoundFormat format, int length, int volume, double hertz) Parameters format SoundFormat format of the sound. 音のフォーマット length int length of the array. 配列の長さ volume int volume 音量（0 ~ 100） hertz double hertz of the sound. 音の周波数 Returns short[] the array of wave data. : short[] Exceptions ArgumentOutOfRangeException Length must be non-negative. ArgumentOutOfRangeException Hertz must be non-negative and greater than 0. ArgumentOutOfRangeException Volume must be below than 100 and more than 0."
  },
  "api/SoundMaker.Sounds.WaveTypes.WaveTypeBase.html": {
    "href": "api/SoundMaker.Sounds.WaveTypes.WaveTypeBase.html",
    "title": "Class WaveTypeBase | SoundMaker Documentation",
    "keywords": "Class WaveTypeBase Namespace SoundMaker.Sounds.WaveTypes Assembly SoundMaker.dll Provides a base class for a basic wave type to inherit from. public abstract class WaveTypeBase Inheritance object WaveTypeBase Derived LowBitNoiseWave PseudoTriangleWave SquareWave TriangleWave Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckGenerateUnitWaveArgs(int, double) protected static void CheckGenerateUnitWaveArgs(int volume, double hertz) Parameters volume int hertz double CheckGenerateWaveArgs(int, int, double) protected void CheckGenerateWaveArgs(int length, int volume, double hertz) Parameters length int volume int hertz double GenerateWave(SoundFormat, int, int, double) Generate array of wave data. 波形データの配列を生成する。 public abstract short[] GenerateWave(SoundFormat format, int length, int volume, double hertz) Parameters format SoundFormat format of the sound. 音のフォーマット length int length of the array. 配列の長さ volume int volume 音量（0 ~ 100） hertz double hertz of the sound. 音の周波数 Returns short[] the array of wave data. : short[] Exceptions ArgumentOutOfRangeException Length must be non-negative. ArgumentOutOfRangeException Hertz must be non-negative and greater than 0. ArgumentOutOfRangeException Volume must be below than 100 and more than 0."
  },
  "api/SoundMaker.Sounds.WaveTypes.html": {
    "href": "api/SoundMaker.Sounds.WaveTypes.html",
    "title": "Namespace SoundMaker.Sounds.WaveTypes | SoundMaker Documentation",
    "keywords": "Namespace SoundMaker.Sounds.WaveTypes Classes LowBitNoiseWave The low bit noise. ロービットノイズ PseudoTriangleWave The pseudo triangle wave. 疑似三角波 SquareWave The square wave. 矩形波 TriangleWave The triangle wave. 三角波 WaveTypeBase Provides a base class for a basic wave type to inherit from."
  },
  "api/SoundMaker.Sounds.html": {
    "href": "api/SoundMaker.Sounds.html",
    "title": "Namespace SoundMaker.Sounds | SoundMaker Documentation",
    "keywords": "Namespace SoundMaker.Sounds Classes MixerBase Provides a base class for a mixer to inherit from. ミキサーの抽象基底クラス MonauralMixer Mix waves to monaural wave. モノラル音声をミックスするクラス。 MonauralWave Monaural wave. モノラル波形データを表すクラス。 StereoMixer Mix waves to stereo wave. ステレオ音声をミックスするクラス。 StereoWave Stereo wave. ステレオ波形データのクラス Track Represents a track with a specific wave type. 特定の波形タイプを持つトラックを表すクラス。 TrackBaseSound Initializes a new instance of the TrackBaseSound class with the specified format and tempo. 指定されたフォーマットとテンポでTrackBaseSoundクラスの新しいインスタンスを初期化するメソッド。 Structs SoundFormat Format of the sound. 音のフォーマットを表す構造体 Interfaces IWave Interface for wave. 波を表すインターフェイス Enums BitRateType the type which is expressed quantization bit rate of the sound. 量子化ビット数の種類を表す列挙型 ChannelType the type which is expressed channels count of the sound. チャンネル数を表す列挙型 SamplingFrequencyType The type which is expressed sampling frequency of the sound. サンプリング周波数の種類を表す列挙型 SoundDirectionType The type which is expressed direction of the sound. ステレオ音声で音が聞こえる方向の種類を表す列挙型"
  },
  "api/SoundMaker.WaveFile.BitRateType.html": {
    "href": "api/SoundMaker.WaveFile.BitRateType.html",
    "title": "Enum BitRateType | SoundMaker Documentation",
    "keywords": "Enum BitRateType Namespace SoundMaker.WaveFile Assembly SoundMaker.dll The type which is expressed quantization bit rate of the sound. 量子化ビット数の種類を表す列挙型 public enum BitRateType : ushort Fields EightBit = 8 8bit. 8ビット SixteenBit = 16 16bit. 16ビット"
  },
  "api/SoundMaker.WaveFile.ChannelType.html": {
    "href": "api/SoundMaker.WaveFile.ChannelType.html",
    "title": "Enum ChannelType | SoundMaker Documentation",
    "keywords": "Enum ChannelType Namespace SoundMaker.WaveFile Assembly SoundMaker.dll The type which is expressed channels count of the sound. チャンネル数の種類を表す列挙型 public enum ChannelType : ushort Fields Monaural = 1 monaural(1ch) モノラル1ch Stereo = 2 stereo(2ch) ステレオ2ch"
  },
  "api/SoundMaker.WaveFile.FormatChunk.html": {
    "href": "api/SoundMaker.WaveFile.FormatChunk.html",
    "title": "Struct FormatChunk | SoundMaker Documentation",
    "keywords": "Struct FormatChunk Namespace SoundMaker.WaveFile Assembly SoundMaker.dll Chunk of format for the .wav file. フォーマットチャンクを表す構造体 public readonly struct FormatChunk : IChunk Implements IChunk Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FormatChunk(SamplingFrequencyType, BitRateType, ChannelType) Constructor. コンストラクタ public FormatChunk(SamplingFrequencyType samplingFrequency, BitRateType bitRate, ChannelType channel) Parameters samplingFrequency SamplingFrequencyType Sampling frequency. サンプリング周波数 bitRate BitRateType Bit rate. 量子化ビット数 channel ChannelType Type of channels count. チャンネル数 Properties BitRate Bit rate. 量子化ビット数 public ushort BitRate { get; } Property Value ushort SamplingFrequency Sampling frequency. サンプリング周波数 public uint SamplingFrequency { get; } Property Value uint Methods GetBytes() Get array of this chunk. フォーマットチャンクのバイト列を取得するメソッド。 public byte[] GetBytes() Returns byte[] Bytes of this chunk. フォーマットチャンクのバイト列 : byte[]"
  },
  "api/SoundMaker.WaveFile.IChunk.html": {
    "href": "api/SoundMaker.WaveFile.IChunk.html",
    "title": "Interface IChunk | SoundMaker Documentation",
    "keywords": "Interface IChunk Namespace SoundMaker.WaveFile Assembly SoundMaker.dll Interface for riff format chunks. チャンクを表すインターフェイス public interface IChunk Methods GetBytes() Get bytes from the chunk. チャンクのバイト列を取得するメソッド。 byte[] GetBytes() Returns byte[] Byte array of the chunk. チャンクのバイト列 : byte[]"
  },
  "api/SoundMaker.WaveFile.RIFFChunk.html": {
    "href": "api/SoundMaker.WaveFile.RIFFChunk.html",
    "title": "Struct RIFFChunk | SoundMaker Documentation",
    "keywords": "Struct RIFFChunk Namespace SoundMaker.WaveFile Assembly SoundMaker.dll Chunk of riff. RIFFチャンクを表す構造体 public readonly struct RIFFChunk : IChunk Implements IChunk Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors RIFFChunk(uint) Chunk of riff. RIFFチャンクを表す構造体 public RIFFChunk(uint Size) Parameters Size uint The number of 8 byte subtracted from the overall file size. ファイル全体サイズからRIFFとWAVEのバイト数(8B)を引いた数。 Methods GetBytes() Get bytes from the chunk. チャンクのバイト列を取得するメソッド。 public byte[] GetBytes() Returns byte[] Byte array of the chunk. チャンクのバイト列 : byte[]"
  },
  "api/SoundMaker.WaveFile.SamplingFrequencyType.html": {
    "href": "api/SoundMaker.WaveFile.SamplingFrequencyType.html",
    "title": "Enum SamplingFrequencyType | SoundMaker Documentation",
    "keywords": "Enum SamplingFrequencyType Namespace SoundMaker.WaveFile Assembly SoundMaker.dll The type which is expressed sampling frequency of the sound. サンプリング周波数の種類を表す列挙型 public enum SamplingFrequencyType : uint Fields FourtyEightKHz = 48000 48000Hz FourtyFourKHz = 44100 44100Hz"
  },
  "api/SoundMaker.WaveFile.SoundWaveChunk.html": {
    "href": "api/SoundMaker.WaveFile.SoundWaveChunk.html",
    "title": "Class SoundWaveChunk | SoundMaker Documentation",
    "keywords": "Class SoundWaveChunk Namespace SoundMaker.WaveFile Assembly SoundMaker.dll Chunk of the sound wave. 波形データのチャンクを表すクラス public class SoundWaveChunk : IChunk Inheritance object SoundWaveChunk Implements IChunk Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SoundWaveChunk(byte[]) Constructor. コンストラクタ public SoundWaveChunk(byte[] soundWave) Parameters soundWave byte[] 音の波形データの配列 Properties Size Size of the wave data. 波形データのサイズ public uint Size { get; } Property Value uint Methods GetBytes() Get bytes from the chunk. チャンクのバイト列を取得するメソッド。 public byte[] GetBytes() Returns byte[] Byte array of the chunk. チャンクのバイト列 : byte[]"
  },
  "api/SoundMaker.WaveFile.WaveWriter.html": {
    "href": "api/SoundMaker.WaveFile.WaveWriter.html",
    "title": "Class WaveWriter | SoundMaker Documentation",
    "keywords": "Class WaveWriter Namespace SoundMaker.WaveFile Assembly SoundMaker.dll Write to the .wav file. waveファイルに書き込む public class WaveWriter Inheritance object WaveWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WaveWriter(FormatChunk, SoundWaveChunk) Constructor. コンストラクタ public WaveWriter(FormatChunk format, SoundWaveChunk soundWave) Parameters format FormatChunk Format chunk. フォーマットチャンク soundWave SoundWaveChunk Sound wave chunk. 音声波形のチャンク Methods Write(Stream) Write to stream. ストリームに書き込む public void Write(Stream stream) Parameters stream Stream Stream. ストリーム Write(string) Write to .wav file. .wavファイルに書き込む public void Write(string path) Parameters path string Path of .wav file. .wavファイルのパス"
  },
  "api/SoundMaker.WaveFile.html": {
    "href": "api/SoundMaker.WaveFile.html",
    "title": "Namespace SoundMaker.WaveFile | SoundMaker Documentation",
    "keywords": "Namespace SoundMaker.WaveFile Classes SoundWaveChunk Chunk of the sound wave. 波形データのチャンクを表すクラス WaveWriter Write to the .wav file. waveファイルに書き込む Structs FormatChunk Chunk of format for the .wav file. フォーマットチャンクを表す構造体 RIFFChunk Chunk of riff. RIFFチャンクを表す構造体 Interfaces IChunk Interface for riff format chunks. チャンクを表すインターフェイス Enums BitRateType The type which is expressed quantization bit rate of the sound. 量子化ビット数の種類を表す列挙型 ChannelType The type which is expressed channels count of the sound. チャンネル数の種類を表す列挙型 SamplingFrequencyType The type which is expressed sampling frequency of the sound. サンプリング周波数の種類を表す列挙型"
  },
  "api/SoundMaker.html": {
    "href": "api/SoundMaker.html",
    "title": "Namespace SoundMaker | SoundMaker Documentation",
    "keywords": "Namespace SoundMaker Classes FormatBuilder Represents a class used to build SoundFormat and FormatChunk. FormatBuilder.BitDepthBuilder FormatBuilder.ChannelTypeBuilder FormatBuilder.SamplingFrequencyBuilder"
  },
  "index.html": {
    "href": "index.html",
    "title": "SoundMakerとは | SoundMaker Documentation",
    "keywords": "SoundMakerとは SoundMakerは、.NET上で動作する音を生成するライブラリです。 特徴 「音程がC4の四分音符」というように音楽の知識で音を生成できます // 音符 new Note(Scale.C, 5, LengthType.Eighth, isDotted: true); // 休符 new Rest(LengthType.Quarter); // タイ new Tie(new Note(Scale.D, 5, LengthType.Eighth), LengthType.Eighth); // 連符 new Tuplet([new Note(Scale.D, 5, LengthType.Eighth), new Note(Scale.D, 5, LengthType.Eighth)], LengthType.Quarter); 周波数を指定しても音を生成できます var triangleWave = new TriangleWave(); int hertz = 800; int length = (int)format.SamplingFrequency * 5; int volume = 50; short[] waveShorts = triangleWave.GenerateWave(format, length, volume, hertz); リニアPCMのWAVを出力することができます var builder = FormatBuilder.Create() .WithFrequency(48000) .WithBitDepth(16) .WithChannelCount(2); var sound = new SoundWaveChunk(/* 音声波形バイト列 */); var waveFileFormat = builder.ToFormatChunk(); var writer = new WaveWriter(waveFileFormat, sound); string filePath = \"sample.wav\"; writer.Write(filePath); ストリームへ書き込むことも可能です。 writer.Write(stream); 楽譜記述フォーマットを提供 簡単な楽譜記述フォーマットのシリアライズ・デシリアライズ機能を提供しています。 // コメントアウト // 付点四分音符(音階はC#4) C#4, 4. // 休符 rest, 4. // タイ と 三連符(4分音符を三等分している) tie(C4, 4, 4, 4); tup(4, C4, C4, C4)"
  },
  "markdowns/introduction.html": {
    "href": "markdowns/introduction.html",
    "title": "イントロダクション | SoundMaker Documentation",
    "keywords": "イントロダクション ここではSoundMakerの使用例をプログラムを示しながら紹介します。"
  },
  "markdowns/migrate-to-ver-3.html": {
    "href": "markdowns/migrate-to-ver-3.html",
    "title": "Ver 3.0.0への移行ガイド | SoundMaker Documentation",
    "keywords": "Ver 3.0.0への移行ガイド SoundMaker Ver 3.0.0への移行に関して、以下のガイドラインに従ってください。メジャーバージョンアップにより、破壊的変更が含まれていますのでご注意ください。 .NET 7以前を利用している場合は.NET 8以降へアップデートする .NET 6のサポート終了に伴い、SoundMakerも.NET 8へ移行しました。.NET 8へのアップデートは以下の手順で行います： .NET SDKのインストール: 最新の.NET 8 SDKを公式サイトからダウンロードしてインストールします。 プロジェクトファイルの更新: 各プロジェクトのTargetFrameworkを.NET 8に更新します。例えば、.csprojファイルで以下のように変更します： <TargetFramework>net8.0</TargetFramework> 依存関係の更新: .NET 8に対応するライブラリやパッケージのバージョンを確認し、必要に応じてアップデートします。 ushort[]型からshort[]型を利用するように変更する 音声波形は符号付き整数を利用することが一般的なので、Ver 3.0.0ではushort型からshort型に変更しました。以下の手順で対応します： コードの修正: ushort[]型を使用している箇所をすべてshort[]型に変更します。例えば、 // 旧コード ushort[] sample = [32767]; // 新コード short[] sample = [32767]; 廃止機能を利用しない Ver 3.0.0以前にObsolete属性がついたメソッドやプロパティは削除されました。これに対応するためには、以下の手順を行います： コードのチェック: Obsolete属性が付与されたメソッドやプロパティを使用している箇所を確認します。これらはコンパイラ警告として表示されることが多いです。 代替機能の利用: Obsoleteとなった機能の代替となるメソッドやプロパティを使用します。削除された機能に関する詳細は、削除を行ったプルリクエストを参照してください：削除を行ったプルリクエスト"
  },
  "markdowns/smsc/serializer.html": {
    "href": "markdowns/smsc/serializer.html",
    "title": "SMSCシリアライズ・デシリアライズ | SoundMaker Documentation",
    "keywords": "SMSCシリアライズ・デシリアライズ SMSCデータをシリアライズおよびデシリアライズする方法を示します。 シリアライズ 以下のコード例では、サウンドコンポーネントをSMSC形式にシリアライズする方法を示しています。 コード例 // using SoundMaker.ScoreData.SMSC; // using SoundMaker.Sounds.Score; var components = new List<ISoundComponent>() { new Note(Scale.E, 5, LengthType.Eighth), new Note(Scale.F, 5, LengthType.Eighth), new Note(Scale.G, 5, LengthType.Eighth), }; var smsc = SMSCFormat.Serialize(components); Console.WriteLine(smsc); 詳細な説明 サウンドコンポーネントの作成: ISoundComponent を実装したクラス（例：Note）のオブジェクトをリストに追加します。 new Note(Scale.E, 5, LengthType.Eighth): 音階E、5オクターブ、長さは八分音符の音を作成。 同様に、音階FおよびGの音符も追加します。 シリアライズ: SMSCFormat.Serialize メソッドを使用して、サウンドコンポーネントのリストをSMSC形式にシリアライズします。 出力: シリアライズされたSMSCデータをコンソールに出力します。 デシリアライズ 以下のコード例では、SMSC形式のデータをサウンドコンポーネントにデシリアライズする方法を示しています。 コード例 // using SoundMaker.ScoreData.SMSC; // using SoundMaker.Sounds.Score; var smsc = \"C4, 4\"; var result = SMSCFormat.Read(smsc); if (result.TryGetValue(out IReadOnlyList<ISoundComponent> components)) { } else { } 詳細な説明 SMSCデータの読み込み: シリアライズされたSMSC形式の文字列を用意します。例：\"C4, 4\"。 デシリアライズ: SMSCFormat.Read メソッドを使用して、SMSC形式のデータをサウンドコンポーネントにデシリアライズします。 結果の確認: result.TryGetValue(out IReadOnlyList<ISoundComponent> components): デシリアライズに成功した場合、サウンドコンポーネントのリストを取得します。 デシリアライズに失敗した場合の処理も含めます。"
  },
  "markdowns/smsc/what-is-the-smsc.html": {
    "href": "markdowns/smsc/what-is-the-smsc.html",
    "title": "SMSCフォーマットとは？ | SoundMaker Documentation",
    "keywords": "SMSCフォーマットとは？ 概要 簡単にSoundMaker用の楽譜を記述するためのフォーマットです。詳細な情報は設定できませんが、簡単に記述できます。 チャンネルやトラックの完全なデータを永続化する目的では利用できないことに注意してください。 例 // コメントアウト // 付点四分音符(音階はC#4) C#4, 4. // 休符 rest, 4. // タイ と 三連符(4分音符を三等分している) tie(C4, 4, 4, 4); tup(4, C4, C4, C4) 仕様 BNF(バッカス・ナウア記法) 今後の展望 音量やエフェクトなどを指定できるように仕様を拡張する可能性があります。"
  },
  "markdowns/start/format.html": {
    "href": "markdowns/start/format.html",
    "title": "利用できるフォーマットについて | SoundMaker Documentation",
    "keywords": "利用できるフォーマットについて SoundMakerでは、以下の形式のWAV出力に対応しています。 出力形式 サンプリング周波数 48000Hz 44100Hz 量子化ビット数 16bit 8bit チャンネル数 Stereo 2ch Monaural 1ch FormatBuilderの使い方 SoundMakerでは、簡単にフォーマットデータを扱うためのビルダクラスを提供しています。 コード例 var builder = FormatBuilder.Create() .WithFrequency(48000) .WithBitDepth(16) .WithChannelCount(2); // 音声波形生成用フォーマット var soundFormat = builder.ToSoundFormat(); // WAV出力用フォーマット var waveFileFormat = builder.ToFormatChunk(); 詳細な説明 サンプリング周波数の設定: .WithFrequency(48000) で、サンプリング周波数を48000Hzに設定します。 量子化ビット数の設定: .WithBitDepth(16) で、量子化ビット数を16bitに設定します。 チャンネル数の設定: .WithChannelCount(2) で、ステレオ（2ch）に設定します。 フォーマットの取得: soundFormat: .ToSoundFormat() メソッドを使用して、音声波形生成用のフォーマットを取得します。 waveFileFormat: .ToFormatChunk() メソッドを使用して、WAV出力用のフォーマットを取得します。"
  },
  "markdowns/start/gen/channel-base-api.html": {
    "href": "markdowns/start/gen/channel-base-api.html",
    "title": "チャンネルベースAPIでの音声生成 | SoundMaker Documentation",
    "keywords": "チャンネルベースAPIでの音声生成 サウンドチャンネルに音符や休符を挿入することで音声を生成する方法を説明します。 概要 この方法では、複数の音のチャンネルを作成し、それらをミキシングしてステレオ音声を生成します。 コード例 private static StereoWave MakeStereoWave(SoundFormat format) { // 一分間の四分音符の個数 int tempo = 100; // まず、音のチャンネルを作成する必要がある。 // 現段階では矩形波、三角波、疑似三角波、ロービットノイズに対応している。 var rightChannel = new SquareSoundChannel(tempo, format, SquareWaveRatio.Point25, PanType.Right) { // ISoundComponentを実装したクラスのオブジェクトをチャンネルに追加していく。 // 現段階では普通の音符、休符、タイ、連符を使うことができる。 new Note(Scale.C, 5, LengthType.Eighth, isDotted: true), new Tie(new Note(Scale.D, 5, LengthType.Eighth), LengthType.Eighth), new Tuplet(GetComponents(), LengthType.Quarter) }; var rightChannel2 = new SquareSoundChannel(tempo, format, SquareWaveRatio.Point125, PanType.Right) { new Note(Scale.C, 4, LengthType.Eighth, isDotted: true), new Note(Scale.D, 4, LengthType.Quarter), new Rest(LengthType.Quarter) }; var leftChannel = new TriangleSoundChannel(tempo, format, PanType.Left) { new Note(Scale.C, 3, LengthType.Eighth, isDotted: true), new Note(Scale.D, 3, LengthType.Quarter), new Rest(LengthType.Quarter) }; var channels = new List<ISoundChannel>() { rightChannel, rightChannel2, leftChannel }; // ミックスは'StereoMixer'クラスで行う。 return new StereoMixer(channels).Mix(); } 詳細な説明 テンポ設定: tempo は1分間に演奏される四分音符の数を示しています。ここでは100に設定されています。 チャンネルの作成: rightChannel: 矩形波のサウンドチャンネル。右パンに設定されています。ドット付き八分音符、タイ、連符が含まれています。 rightChannel2: 矩形波の別チャンネル。異なる周波数（SquareWaveRatio.Point125）で設定されています。 leftChannel: 三角波のサウンドチャンネル。左パンに設定されています。 ISoundComponent を実装したクラスのオブジェクト（Note、Tie、Tuplet、Restなど）をチャンネルに追加しています。 ミキシング: 最後に、これらのチャンネルを StereoMixer クラスでミックスし、ステレオ音声を生成します。"
  },
  "markdowns/start/gen/frequency.html": {
    "href": "markdowns/start/gen/frequency.html",
    "title": "周波数を指定し、音声波形を生成する | SoundMaker Documentation",
    "keywords": "周波数を指定し、音声波形を生成する 周波数を直接指定して音波を生成する方法です。以下のプログラムでは、800Hzの三角波を5秒間生成します。 概要 指定された周波数の音波を生成するためのコードです。指定秒数分の配列の長さは サンプリング周波数 * 秒数 で求められます。 コード例 private static StereoWave MakeStereoWave(SoundFormat format) { var triangleWave = new TriangleWave(); int hertz = 800; int length = (int)format.SamplingFrequency * 5; int volume = 50; var waveShorts = triangleWave.GenerateWave(format, length, volume, hertz); return new StereoWave(waveShorts, waveShorts); } 詳細な説明 三角波の作成: TriangleWave クラスのインスタンスを作成します。 周波数の設定: hertz は生成する音波の周波数を指定します。ここでは800Hzに設定されています。 配列の長さの計算: length は サンプリング周波数 * 秒数 で計算されます。ここでは5秒間の音波を生成するため、 format.SamplingFrequency * 5 となります。 音量の設定: volume で音量を指定します。ここでは50に設定されています(0 <= volume <= 100)。 音波の生成: triangleWave.GenerateWave メソッドを使って、指定された周波数と音量で音波を生成します。 ステレオ音波の作成: 最後に、生成された音波データを使って StereoWave のインスタンスを作成します。"
  },
  "markdowns/start/gen/track-base-api-partial.html": {
    "href": "markdowns/start/gen/track-base-api-partial.html",
    "title": "バッファリング可能な音声生成(トラックベースAPI) | SoundMaker Documentation",
    "keywords": "バッファリング可能な音声生成(トラックベースAPI) この機能は音声波形を部分的に生成し、リアルタイムでの音声再生をサポートします。特に大規模な音声データを処理する場合に、効率的な再生を実現します。 概要 この機能は、指定されたバッファサイズごとに音声波形を部分的に生成します。これにより、音声データのリアルタイム再生が可能になります。 コード例 以下は、バッファサイズ1024でステレオ波形を生成するコード例です： // GenerateBufferedMonauralWave var stereoWaves = trackBaseSound.GenerateBufferedStereoWave(startIndex: 0, bufferSize: 1024); foreach (var wave in stereoWaves) { // 波形を利用した処理 } 開始インデクス以降の波形を繰り返し生成します。 詳細な説明 バッファサイズ: bufferSize は一度に生成する波形データのサイズを示しています。この例では1024に設定されています。 開始インデックス: startIndex は波形生成の開始位置を示しています。ここでは0に設定されています。"
  },
  "markdowns/start/gen/track-base-api.html": {
    "href": "markdowns/start/gen/track-base-api.html",
    "title": "トラックベースAPIでの音声生成 (ver 3.0.0以降) | SoundMaker Documentation",
    "keywords": "トラックベースAPIでの音声生成 (ver 3.0.0以降) チャンネルベースAPIと異なり、開始時間をミリ秒で指定でき、パンも数値の範囲で指定できるため、細かな調整が可能です。 概要 この方法では、複数のトラックを作成し、それらをミキシングしてステレオ音声を生成します。各トラックの開始時間をミリ秒単位で指定でき、パン（左右の音の配置）も調整可能です。 コード例 private static StereoWave MakeStereoWave(SoundFormat format) { // 一分間の四分音符の個数 int tempo = 100; var trackBaseSound = new TrackBaseSound(format, tempo); var track1Components = new ISoundComponent[] { // ISoundComponentを実装したクラスのオブジェクトの配列を定義する。上から順に演奏される。 // 現段階では普通の音符、休符、タイ、連符を使うことができる。 new Note(Scale.C, 5, LengthType.Eighth, isDotted: true), new Tie(new Note(Scale.D, 5, LengthType.Eighth), LengthType.Eighth), new Tuplet(GetComponents(), LengthType.Quarter) }; var track2Components = new ISoundComponent[] { new Note(Scale.C, 4, LengthType.Eighth, isDotted: true), new Note(Scale.D, 4, LengthType.Quarter), new Rest(LengthType.Quarter) }; var track3Components = new ISoundComponent[] { new Note(Scale.C, 3, LengthType.Eighth, isDotted: true), new Note(Scale.D, 3, LengthType.Quarter), new Rest(LengthType.Quarter) }; // トラックを作成する var track1 = trackBaseSound.CreateTrack(startMilliSecond: 0, new SquareWave(SquareWaveRatio.Point25)); track1.Import(track1Components); // パンを-1から1の範囲で指定できます。1は左、-1は右です。 // 上限、下限値をオーバーした場合は上限・下限値に丸められることに注意してください。 track1.Pan = -1; var track2 = trackBaseSound.CreateTrack(0, new SquareWave(SquareWaveRatio.Point125)); track2.Import(track2Components); track2.Pan = -1; var track3 = trackBaseSound.CreateTrack(0, new TriangleWave()); track3.Import(track3Components); track3.Pan = 1; // ステレオ波を生成する return trackBaseSound.GenerateStereoWave(); } 詳細な説明 テンポ設定: tempo は1分間に演奏される四分音符の数を示しています。ここでは100に設定されています。 トラックの作成: track1: 矩形波のトラック。パンは右（Pan = -1）に設定されています。 コンポーネント: ドット付き八分音符、タイ、連符。 track2: 矩形波の別トラック。パンは右（Pan = -1）に設定されています。 コンポーネント: ドット付き八分音符、四分音符、休符。 track3: 三角波のトラック。パンは左（Pan = 1）に設定されています。 コンポーネント: ドット付き八分音符、四分音符、休符。 開始時間の指定: 各トラックの開始時間をミリ秒単位で指定できます。例えば、track1 の開始時間は startMilliSecond: 0 です。 パンの設定: パンを -1 から 1 の範囲で指定でき、1 は左、-1 は右を示します。上限、下限値をオーバーした場合は自動的に丸められます。 音波の生成: trackBaseSound.GenerateStereoWave メソッドを使って、すべてのトラックをミックスし、ステレオ音波を生成します。"
  },
  "markdowns/start/getting-started.html": {
    "href": "markdowns/start/getting-started.html",
    "title": "最初のコード | SoundMaker Documentation",
    "keywords": "最初のコード using SoundMaker; using SoundMaker.Sounds; using SoundMaker.Sounds.Score; using SoundMaker.Sounds.SoundChannels; using SoundMaker.WaveFile; namespace YourNamespace; public static class YourClass { private static void Main() { // サウンドの形式を作成する。 var builder = FormatBuilder.Create() .WithFrequency(48000) .WithBitDepth(16) .WithChannelCount(2); var soundFormat = builder.ToSoundFormat(); StereoWave wave = MakeStereoWave(soundFormat); // ファイルに書き込む。 var sound = new SoundWaveChunk(wave.GetBytes(soundFormat.BitRate)); var waveFileFormat = builder.ToFormatChunk(); var writer = new WaveWriter(waveFileFormat, sound); string filePath = \"sample.wav\"; writer.Write(filePath); } private static StereoWave MakeStereoWave(SoundFormat format) { // 一分間の四分音符の個数 int tempo = 100; // まず、音のチャンネルを作成する必要がある。 // 現段階では矩形波、三角波、疑似三角波、ロービットノイズに対応している。 var rightChannel = new SquareSoundChannel(tempo, format, SquareWaveRatio.Point25, PanType.Right) { // ISoundComponentを実装したクラスのオブジェクトをチャンネルに追加していく。 // 現段階では普通の音符、休符、タイ、連符を使うことができる。 new Note(Scale.C, 5, LengthType.Eighth, isDotted: true), new Tie(new Note(Scale.D, 5, LengthType.Eighth), LengthType.Eighth), new Tuplet(GetComponents(), LengthType.Quarter) }; var rightChannel2 = new SquareSoundChannel(tempo, format, SquareWaveRatio.Point125, PanType.Right) { new Note(Scale.C, 4, LengthType.Eighth, isDotted: true), new Note(Scale.D, 4, LengthType.Quarter), new Rest(LengthType.Quarter) }; var leftChannel = new TriangleSoundChannel(tempo, format, PanType.Left) { new Note(Scale.C, 3, LengthType.Eighth, isDotted: true), new Note(Scale.D, 3, LengthType.Quarter), new Rest(LengthType.Quarter) }; var channels = new List<ISoundChannel>() { rightChannel, rightChannel2, leftChannel }; // ミックスは'StereoMixer'クラスで行う。 return new StereoMixer(channels).Mix(); } private static IReadOnlyList<BasicSoundComponentBase> GetComponents() { return new List<BasicSoundComponentBase>() { new Note(Scale.E, 5, LengthType.Eighth), new Note(Scale.F, 5, LengthType.Eighth), new Note(Scale.G, 5, LengthType.Eighth), }; } } 今後の説明でもこのサンプルコードを利用します。"
  },
  "markdowns/start/wav.html": {
    "href": "markdowns/start/wav.html",
    "title": "WAV出力 | SoundMaker Documentation",
    "keywords": "WAV出力 SoundMakerではWAV形式(リニアPCM)で音声を出力できます。 ファイルに出力する 以下のコード例では、サウンドの形式を作成し、波形をファイルに出力する方法を示しています。 コード例 // サウンドの形式を作成する。 var builder = FormatBuilder.Create() .WithFrequency(48000) .WithBitDepth(16) .WithChannelCount(2); var waveFileFormat = builder.ToFormatChunk(); // 波形のバイト列 var wave = new byte[10]; var sound = new SoundWaveChunk(wave); var writer = new WaveWriter(waveFileFormat, sound); var filePath = \"sample.wav\"; writer.Write(filePath); 詳細な説明 サウンド形式の作成: FormatBuilder を使用してサウンドの形式を設定します。 .WithFrequency(48000): サンプリング周波数を48000Hzに設定。 .WithBitDepth(16): 量子化ビット数を16bitに設定。 .WithChannelCount(2): チャンネル数をステレオ（2ch）に設定。 フォーマットの取得: ToFormatChunk メソッドを使って、WAV出力用のフォーマットを取得します。 波形の作成: SoundWaveChunk クラスのインスタンスを作成し、波形データ（バイト列）を渡します。 ファイルへの書き込み: WaveWriter クラスを使用して、フォーマットと波形データを指定し、ファイルに出力します。 ストリームに出力する 以下のコード例では、サウンドの形式を作成し、波形をメモリストリームに出力する方法を示しています。 コード例 // サウンドの形式を作成する。 var builder = FormatBuilder.Create() .WithFrequency(48000) .WithBitDepth(16) .WithChannelCount(2); var waveFileFormat = builder.ToFormatChunk(); // 波形のバイト列 var wave = new byte[10]; var sound = new SoundWaveChunk(wave); var writer = new WaveWriter(waveFileFormat, sound); var memoryStream = new MemoryStream(); writer.Write(memoryStream); 詳細な説明 サウンド形式の作成: FormatBuilder を使用してサウンドの形式を設定します。 .WithFrequency(48000): サンプリング周波数を48000Hzに設定。 .WithBitDepth(16): 量子化ビット数を16bitに設定。 .WithChannelCount(2): チャンネル数をステレオ（2ch）に設定。 フォーマットの取得: ToFormatChunk メソッドを使って、WAV出力用のフォーマットを取得します。 波形の作成: SoundWaveChunk クラスのインスタンスを作成し、波形データ（バイト列）を渡します。 ストリームへの書き込み: WaveWriter クラスを使用して、フォーマットと波形データを指定し、メモリストリームに出力します。"
  }
}